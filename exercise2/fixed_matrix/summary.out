Memory allocated

Loading modules
Lmod Warning: The architecture selection module has been deprecated. The
module system will now autonomously handle the proper selection of binaries. 
While processing the following module(s):
    Module fullname     Module Filename
    ---------------     ---------------
    architecture/Intel  /orfeo/opt/modules/profiles/architecture/Intel.lua

Loading mkl version 2022.2.1
Loading tbb version 2021.7.1
Loading compiler-rt version 2022.2.1
modules loaded
configure: detected Linux kernel version 6.4.6-100.fc37.x86_64.
configure: python interpreter search list is: python python3 python2.
configure: found 'python3'.
configure: using 'python3' as python interpreter.
configure: found python version 3.11.4 (maj: 3, min: 11, rev: 4).
configure: python 3.11.4 appears to be supported.
configure: C compiler search list is: gcc clang cc.
configure: found 'gcc'.
configure: using 'gcc' as C compiler.
configure: found gcc version 12.3.1 (maj: 12, min: 3, rev: 1).
configure: checking for blacklisted configurations due to gcc 12.3.1.
configure: checking gcc 12.3.1 against known consequential version ranges.
configure: found assembler ('as') version 2.38 (maj: 2, min: 38, rev: ).
configure: checking for blacklisted configurations due to as 2.38.
configure: C++ compiler search list is: g++ clang++ c++.
configure: found 'g++'.
configure: using 'g++' as C++ compiler.
configure: Fortran compiler search list is: gfortran ifort.
configure: found 'gfortran'.
configure: using 'gfortran' as Fortran compiler.
configure: library archiver search list is: ar.
configure: found 'ar'.
configure: using 'ar' as library archiver.
configure: archive indexer search list is: ranlib.
configure: found 'ranlib'.
configure: using 'ranlib' as archive indexer.
configure: reading configuration registry...done.
configure: determining default version string.
configure: found '.git' directory; assuming git clone.
configure: executing: git describe --tags.
configure: got back 0.9.0-118-g634e532c.
configure: truncating to 0.9.0-118.
configure: starting configuration of BLIS 0.9.0-118.
configure: configuring with official version string.
configure: found shared library .so version '4.0.0'.
configure:   .so major version: 4
configure:   .so minor.build version: 0.0
configure: automatic configuration requested.
configure: hardware detection driver returned 'skx'.
configure: checking configuration against contents of 'config_registry'.
configure: configuration 'skx' is registered.
configure: 'skx' is defined as having the following sub-configurations:
configure:    skx
configure: which collectively require the following kernels:
configure:    skx haswell zen
configure: checking sub-configurations:
configure:   'skx' is registered...and exists.
configure: checking sub-configurations' requisite kernels:
configure:   'skx' kernels...exist.
configure:   'haswell' kernels...exist.
configure:   'zen' kernels...exist.
configure: detected --prefix='/u/dssc/ldavin00/myblis'.
configure: no install exec_prefix option given; defaulting to PREFIX.
configure: no install libdir option given; defaulting to EXECPREFIX/lib.
configure: no install includedir option given; defaulting to PREFIX/include.
configure: no install sharedir option given; defaulting to PREFIX/share.
configure: final installation directories:
configure:   prefix:      /u/dssc/ldavin00/myblis
configure:   exec_prefix: /u/dssc/ldavin00/myblis
configure:   libdir:      /u/dssc/ldavin00/myblis/lib
configure:   includedir:  /u/dssc/ldavin00/myblis/include
configure:   sharedir:    /u/dssc/ldavin00/myblis/share
configure: NOTE: the variables above can be overridden when running make.
configure: no preset CFLAGS detected.
configure: no preset LDFLAGS detected.
configure: disabling verbose make output. (enable with 'make V=1'.)
configure: disabling ARG_MAX hack.
configure: debug symbols disabled.
configure: AddressSanitizer support disabled.
configure: building BLIS as both static and shared libraries.
configure: exporting only public symbols within shared library.
configure: enabling operating system support.
configure: enabling thread-local storage (TLS) support.
configure: enabling support for threading via OpenMP.
configure: enabling support for single-threading.
configure: threading will default to OpenMP.
configure: requesting slab work partitioning in jr and/or ir loops.
configure: internal memory pools for packing blocks are enabled.
configure: internal memory pools for small blocks are enabled.
configure: memory tracing output is disabled.
configure: libmemkind not found; disabling.
configure: compiler appears to support #pragma omp simd.
configure: the BLAS compatibility layer is enabled.
configure: the CBLAS compatibility layer is enabled.
configure: mixed datatype support is enabled.
configure: mixed datatype optimizations requiring extra memory are enabled.
configure: sup (skinny/unpacked) matrix handling is enabled.
configure: trsm diagonal element pre-inversion is enabled.
configure: the BLIS API integer size is automatically determined.
configure: the BLAS/CBLAS API integer size is 32-bit.
configure: AMD-specific framework files will not be considered.
configure: configuring with no addons.
configure: configuring for conventional gemm implementation.
configure: configuring complex return type as "gnu".
configure: creating ./config.mk from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/config.mk.in
configure: creating ./bli_config.h from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/bli_config.h.in
configure: creating ./bli_addon.h from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/bli_addon.h.in
configure: creating ./obj/skx
configure: creating ./obj/skx/config/skx
configure: creating ./obj/skx/kernels/skx
configure: creating ./obj/skx/kernels/haswell
configure: creating ./obj/skx/kernels/zen
configure: creating ./obj/skx/ref_kernels/skx
configure: creating ./obj/skx/frame
configure: creating ./obj/skx/blastest
configure: creating ./obj/skx/testsuite
configure: creating ./lib/skx
configure: creating ./include/skx
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./config/skx to ./obj/skx/config/skx
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/skx to ./obj/skx/kernels/skx
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/haswell to ./obj/skx/kernels/haswell
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/zen to ./obj/skx/kernels/zen
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels to ./obj/skx/ref_kernels
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels to ./obj/skx/ref_kernels/skx
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./frame to ./obj/skx/frame
configure: creating makefile fragments in ./obj/skx/config/skx
configure: creating makefile fragments in ./obj/skx/kernels/skx
configure: creating makefile fragments in ./obj/skx/kernels/haswell
configure: creating makefile fragments in ./obj/skx/kernels/zen
configure: creating makefile fragments in ./obj/skx/ref_kernels
configure: creating makefile fragments in ./obj/skx/frame
configure: configured to build within top-level directory of source distribution.
Generating monolithic blis.h
Generated include/skx/blis.h
Compiling obj/skx/config/skx/bli_cntx_init_skx.o ('skx' CFLAGS for config code)
Compiling obj/skx/kernels/skx/3/bli_dgemm_skx_asm_16x12_l2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/skx/3/bli_dgemm_skx_asm_16x14.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/skx/3/bli_sgemm_skx_asm_32x12_l2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_c3xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_c8xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_d8xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_d6xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_s16xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_s6xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_z3xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/1m/bli_packm_haswell_asm_z4xk.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/bli_gemm_haswell_asm_d8x6.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/bli_gemmtrsm_l_haswell_asm_d6x8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/bli_gemm_haswell_asm_d6x8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/bli_gemmtrsm_u_haswell_asm_d6x8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_d6x8m.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_d6x8n.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_s6x16m.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_s6x16n.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_d6x8m.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_s6x16m.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_d6x8n.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_s6x16n.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx1.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx4.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_r_haswell_ref_dMx1.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx4.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx6.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx12.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx16.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx1.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx4.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_r_haswell_ref_sMx1.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx12.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx16.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx2.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx4.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx6.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_amaxv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_axpyv_zen_int10.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_axpyv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_copyv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_dotv_zen_int10.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_dotv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_dotxv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_scalv_zen_int10.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_scalv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_setv_zen_int.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1/bli_swapv_zen_int8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1f/bli_axpyf_zen_int_4.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1f/bli_axpyf_zen_int_5.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1f/bli_axpyf_zen_int_8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/1f/bli_dotxf_zen_int_8.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/3/bli_gemm_small.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/3/bli_gemmt_small.o ('skx' CFLAGS for kernels)
Compiling obj/skx/kernels/zen/3/bli_trsm_small.o ('skx' CFLAGS for kernels)
Compiling obj/skx/ref_kernels/skx/bli_cntx_skx_ref.o ('skx' CFLAGS for ref. kernel init)
Compiling obj/skx/ref_kernels/skx/1/bli_addv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_amaxv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_axpbyv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_axpyv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_copyv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_dotv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_dotxv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_invertv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_invscalv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_scal2v_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_scalv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_setv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_subv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_swapv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1/bli_xpbyv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1f/bli_axpy2v_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1f/bli_axpyf_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1f/bli_dotaxpyv_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1f/bli_dotxaxpyf_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1f/bli_dotxf_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1m/bli_packm_cxc_diag_1er_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1m/bli_packm_cxc_diag_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1m/bli_packm_cxk_1er_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1m/bli_packm_cxk_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/1m/bli_unpackm_cxk_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/3/bli_gemm_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/3/bli_gemmsup_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/3/bli_gemmtrsm_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/3/bli_trsm_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/ind/bli_gemm1m_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/ind/bli_gemmtrsm1m_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/ref_kernels/skx/ind/bli_trsm1m_skx_ref.o ('skx' CFLAGS for ref. kernels)
Compiling obj/skx/frame/0/bli_l0_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/0/bli_l0_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/0/bli_l0_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/0/bli_l0_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/0/copysc/bli_copysc.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1/bli_l1v_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1d/bli_l1d_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1f/bli_l1f_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/bli_l1m_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_alloc.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_blk_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_init.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_int.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_part.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_scalar.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_struc_cxk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/packm/bli_packm_struc_cxk_md.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/unpackm/bli_unpackm_blk_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/unpackm/bli_unpackm_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/unpackm/bli_unpackm_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/1m/unpackm/bli_unpackm_int.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/bli_l2_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/gemv/bli_gemv_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/gemv/bli_gemv_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/gemv/bli_gemv_unf_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/gemv/bli_gemv_unf_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/gemv/bli_gemv_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/ger/bli_ger_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/ger/bli_ger_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/ger/bli_ger_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unb_var3.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unb_var4.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unf_var1a.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unf_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unf_var3a.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_unf_var3.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/hemv/bli_hemv_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her/bli_her_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her/bli_her_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her/bli_her_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unb_var3.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unb_var4.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unf_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_unf_var4.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/her2/bli_her2_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trmv/bli_trmv_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trmv/bli_trmv_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trmv/bli_trmv_unf_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trmv/bli_trmv_unf_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trmv/bli_trmv_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trsv/bli_trsv_unb_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trsv/bli_trsv_unb_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trsv/bli_trsv_unf_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trsv/bli_trsv_unf_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/2/trsv/bli_trsv_var_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_blocksize.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_decor.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_direct.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_ind.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_int.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_packab.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_prune.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_schema.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_decor.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_int.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_packm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_packm_var.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_ref.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_var12.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_sup_var1n2m.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_thrinfo.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_ukr_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_ukr_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/bli_l3_ukr_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_blk_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_blk_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_blk_var3.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_md.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemm/bli_gemm_md_c2r_ref.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_l_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_l_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_u_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_u_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_x_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/gemmt/bli_gemmt_x_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/hemm/bli_hemm_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/symm/bli_symm_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_ll_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_ll_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_lu_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_lu_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_rl_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_rl_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_ru_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_ru_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_xx_ker_var2b.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm/bli_trmm_xx_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trmm3/bli_trmm3_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_blk_var1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_blk_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_blk_var3.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_front.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_ll_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_lu_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_rl_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_ru_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/3/trsm/bli_trsm_xx_ker_var2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_apool.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_arch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_array.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_blksz.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_clock.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_cntl.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_cntx.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_const.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_cpuid.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_env.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_error.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_func.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_getopt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_gks.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_ind.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_info.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_init.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_machval.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_malloc.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_mbool.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_memsys.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_obj.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_obj_scalar.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_pack.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_param_map.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_part.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_pba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_pool.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_prune.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_query.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_rntm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_sba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_setgetijm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_setgetijv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_setri.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_string.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/bli_winsys.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/cast/bli_castm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/cast/bli_castnzm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/cast/bli_castv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/check/bli_obj_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/check/bli_part_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/noopt/bli_dlamch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/noopt/bli_lsame.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/noopt/bli_slamch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/proj/bli_projm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/base/proj/bli_projv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_amax.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_asum.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_axpy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_copy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_dot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_gemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_gemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_ger.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_hemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_hemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_her2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_her2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_her.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_herk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_nrm2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_swap.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_symm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_scal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_symv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_syr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_syr2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_syr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_syrk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_trmm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_trmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_trsm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/bla_trsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/blis/thread/b77_thread.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/f77_sub/f77_amax_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/f77_sub/f77_asum_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/f77_sub/f77_dot_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/f77_sub/f77_nrm2_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_caxpy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ccopy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cdotc_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cdotu_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cgbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cgemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cgemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cgerc.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cgeru.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cher2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cher2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cher.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cherk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chpr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_chpr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_csscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_cswap.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_csymm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_csyr2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_csyrk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctbsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctpsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctrmm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctrmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctrsm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ctrsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dasum.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_daxpy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dcopy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ddot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dgbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dgemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dgemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dger.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dnrm2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_drot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_drotg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_drotm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_drotmg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsdot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dspmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dspr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dspr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dswap.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsymm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsymv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsyr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsyr2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsyr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dsyrk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtbsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtpsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtrmm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtrmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtrsm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dtrsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dzasum.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_dznrm2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_globals.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_icamax.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_idamax.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_isamax.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_izamax.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sasum.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_saxpy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_scasum.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_scnrm2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_scopy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sdot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sdsdot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sgbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sgemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sgemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sger.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_snrm2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_srot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_srotg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_srotm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_srotmg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sspmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sspr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sspr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_sswap.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssymm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssymv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssyr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssyr2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssyr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ssyrk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_stbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_stbsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_stpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_stpsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_strmm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_strmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_strsm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_strsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_xerbla.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zaxpy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zcopy.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zdotc_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zdotu_sub.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zdscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zgbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zgemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zgemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zgerc.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zgeru.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhemm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhemv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zher2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zher2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zher.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zherk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhpr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zhpr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zscal.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zswap.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zsymm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zsyr2k.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_zsyrk.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztbsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztpsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztrmm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztrmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztrsm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/cblas_ztrsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_caxpby.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_cgemm3m.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_cgemm_batch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_cgemmt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_daxpby.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_dgemm_batch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_dgemmt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_saxpby.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_sgemm_batch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_sgemmt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_zaxpby.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_zgemm3m.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_zgemm_batch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/cblas/src/extra/cblas_zgemmt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/extra/bla_axpby.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/extra/bla_gemm3m.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/extra/bla_gemm_batch.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/extra/bla_gemmt.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_cabs1.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_gbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_hbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_hpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_hpr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_hpr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_lsame.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_rot.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_rotg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_rotm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_rotmg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_sbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_spmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_spr2.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_spr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_tbmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_tbsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_tpmv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_tpsv.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_xerbla_array.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/bla_xerbla.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_c_abs.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_c_div.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_d_abs.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_d_cnjg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_d_imag.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_d_sign.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_f__cabs.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_r_abs.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_r_cnjg.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_r_imag.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_r_sign.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_z_abs.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/compat/f2c/util/bla_z_div.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_pthread.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thrcomm.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thrcomm_openmp.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thrcomm_pthreads.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thrcomm_single.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_openmp.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_pthreads.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_range.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_range_slab_rr.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_range_tlb.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thread_single.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/thread/bli_thrinfo.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_check.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_fpa.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_oapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_oapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_oapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_tapi_ba.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_tapi.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_tapi_ex.o ('skx' CFLAGS for framework code)
Compiling obj/skx/frame/util/bli_util_unb_var1.o ('skx' CFLAGS for framework code)
Archiving lib/skx/libblis.a
Dynamically linking lib/skx/libblis.so
Creating symlink lib/skx/libblis.so.4
Installing libblis.a into /u/dssc/ldavin00/myblis/lib/
Installing libblis.so.4.0.0 into /u/dssc/ldavin00/myblis/lib/
Installing symlink libblis.so into /u/dssc/ldavin00/myblis/lib/
Installing symlink libblis.so.4 into /u/dssc/ldavin00/myblis/lib/
Generating monolithic cblas.h........
Generated include/skx/cblas.h
Installing blis.h cblas.h into /u/dssc/ldavin00/myblis/include/blis/
Installing config.mk common.mk into /u/dssc/ldavin00/myblis/share/blis/
Installing config/skx/make_defs.mk into /u/dssc/ldavin00/myblis/share/blis/config/skx
mkdir -p /u/dssc/ldavin00/myblis/share/pkgconfig
Installing blis.pc into /u/dssc/ldavin00/myblis/share/pkgconfig/
install -c -m 0644 blis.pc /u/dssc/ldavin00/myblis/share/pkgconfig
blis installed
returning to /u/dssc/ldavin00/Foundations_of_HPC_final_project/exercise2/fixed_matrix
returned to previous path
setting number of cores and their topology
setted number of cores and their topology

exporting settings
settings exported

path to results is ./THIN/spread_cores

compile files, specifying in which folder the results will be stored
gcc -DUSE_DOUBLE -DMKL ../gemm.c -m64 -I/opt/area/shared/programs/x86/oneAPI/2022.3.1/mkl/2022.2.1/include -L/opt/area/shared/programs/x86/oneAPI/2022.3.1/mkl/2022.2.1/lib/intel64  -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl  -o THIN/spread_cores/gemm_mkl_d.exe -DSAVE_RESULTS
gcc -DUSE_DOUBLE -DOPENBLAS ../gemm.c -m64 -I/opt/programs/openBLAS/0.3.23-omp/include -L/opt/programs/openBLAS/0.3.23-omp/lib -lopenblas -lpthread  -o THIN/spread_cores/gemm_openblas_d.exe -fopenmp -DSAVE_RESULTS
gcc -DUSE_DOUBLE -DBLIS ../gemm.c -m64 -I/u/dssc/ldavin00/myblis/include/blis -L/u/dssc/ldavin00/myblis/lib -lpthread -lblis  -o THIN/spread_cores/gemm_blis_d.exe -fopenmp -DSAVE_RESULTS	
gcc -DUSE_FLOAT -DMKL ../gemm.c -m64 -I/opt/area/shared/programs/x86/oneAPI/2022.3.1/mkl/2022.2.1/include -L/opt/area/shared/programs/x86/oneAPI/2022.3.1/mkl/2022.2.1/lib/intel64  -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl  -o THIN/spread_cores/gemm_mkl_f.exe -DSAVE_RESULTS
gcc -DUSE_FLOAT -DOPENBLAS ../gemm.c -m64 -I/opt/programs/openBLAS/0.3.23-omp/include -L/opt/programs/openBLAS/0.3.23-omp/lib -lopenblas -lpthread  -o THIN/spread_cores/gemm_openblas_f.exe -fopenmp -DSAVE_RESULTS
gcc -DUSE_FLOAT -DBLIS ../gemm.c -m64 -I/u/dssc/ldavin00/myblis/include/blis -L/u/dssc/ldavin00/myblis/lib -lpthread -lblis -o THIN/spread_cores/gemm_blis_f.exe -fopenmp -DSAVE_RESULTS
files compiled
move to the result path
moved to ./THIN/spread_cores
run files
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.851991966 s


5000x5000x5000	3.851992 s	64.901485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.643613404 s


5000x5000x5000	3.643613 s	68.613207 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.859798070 s


5000x5000x5000	3.859798 s	64.770228 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.892453065 s


5000x5000x5000	1.892453 s	132.103673 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.832814872 s


5000x5000x5000	1.832815 s	136.402211 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.966936073 s


5000x5000x5000	1.966936 s	127.101233 GFLOPS
File saved successfully
Number of cores = 1 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.856490757 s


5000x5000x5000	3.856491 s	64.825774 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.658248910 s


5000x5000x5000	3.658249 s	68.338707 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.837034646 s


5000x5000x5000	3.837035 s	65.154481 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.886571674 s


5000x5000x5000	1.886572 s	132.515506 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.849875163 s


5000x5000x5000	1.849875 s	135.144255 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.409273 s


5000x5000x5000	2.000409 s	124.974426 GFLOPS
File saved successfully
Number of cores = 1 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.854880419 s


5000x5000x5000	3.854880 s	64.852855 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.628180131 s


5000x5000x5000	3.628180 s	68.905068 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.868736433 s


5000x5000x5000	3.868736 s	64.620582 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.889749173 s


5000x5000x5000	1.889749 s	132.292689 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.857608633 s


5000x5000x5000	1.857609 s	134.581631 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.964670448 s


5000x5000x5000	1.964670 s	127.247804 GFLOPS
File saved successfully
Number of cores = 1 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.842880167 s


5000x5000x5000	3.842880 s	65.055372 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.639768788 s


5000x5000x5000	3.639769 s	68.685682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.836858423 s


5000x5000x5000	3.836858 s	65.157473 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.888341508 s


5000x5000x5000	1.888342 s	132.391307 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.832600844 s


5000x5000x5000	1.832601 s	136.418141 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.976568006 s


5000x5000x5000	1.976568 s	126.481861 GFLOPS
File saved successfully
Number of cores = 1 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.841659956 s


5000x5000x5000	3.841660 s	65.076036 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.625075970 s


5000x5000x5000	3.625076 s	68.964072 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.835477381 s


5000x5000x5000	3.835477 s	65.180935 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.892407937 s


5000x5000x5000	1.892408 s	132.106823 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.831667026 s


5000x5000x5000	1.831667 s	136.487689 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.965441987 s


5000x5000x5000	1.965442 s	127.197853 GFLOPS
File saved successfully
Number of cores = 1 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.914104319 s


5000x5000x5000	1.914104 s	130.609391 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.900424731 s


5000x5000x5000	1.900425 s	131.549540 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.992649033 s


5000x5000x5000	1.992649 s	125.461130 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.937933578 s


5000x5000x5000	0.937934 s	266.543395 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.922268954 s


5000x5000x5000	0.922269 s	271.070601 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.996929771 s


5000x5000x5000	0.996930 s	250.769921 GFLOPS
File saved successfully
Number of cores = 2 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.914195821 s


5000x5000x5000	1.914196 s	130.603148 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.906659839 s


5000x5000x5000	1.906660 s	131.119351 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.991082778 s


5000x5000x5000	1.991083 s	125.559822 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.937728899 s


5000x5000x5000	0.937729 s	266.601574 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.923296112 s


5000x5000x5000	0.923296 s	270.769038 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.4700974 s


5000x5000x5000	1.004701 s	248.830255 GFLOPS
File saved successfully
Number of cores = 2 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.915004017 s


5000x5000x5000	1.915004 s	130.548029 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.903842492 s


5000x5000x5000	1.903842 s	131.313384 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.991715600 s


5000x5000x5000	1.991716 s	125.519929 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.938332793 s


5000x5000x5000	0.938333 s	266.429994 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.923707141 s


5000x5000x5000	0.923707 s	270.648552 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.1872372 s


5000x5000x5000	1.001872 s	249.532782 GFLOPS
File saved successfully
Number of cores = 2 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.914513159 s


5000x5000x5000	1.914513 s	130.581500 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.917735901 s


5000x5000x5000	1.917736 s	130.362059 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.991601303 s


5000x5000x5000	1.991601 s	125.527132 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.938392458 s


5000x5000x5000	0.938392 s	266.413053 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.923890349 s


5000x5000x5000	0.923890 s	270.594882 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.457396 s


5000x5000x5000	1.000457 s	249.885703 GFLOPS
File saved successfully
Number of cores = 2 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.914474432 s


5000x5000x5000	1.914474 s	130.584141 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.903574726 s


5000x5000x5000	1.903575 s	131.331855 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.998561688 s


5000x5000x5000	1.998562 s	125.089959 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.938087277 s


5000x5000x5000	0.938087 s	266.499724 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.921873876 s


5000x5000x5000	0.921874 s	271.186771 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.1342150 s


5000x5000x5000	1.001342 s	249.664912 GFLOPS
File saved successfully
Number of cores = 2 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.254199151 s


5000x5000x5000	1.254199 s	199.330385 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.266070535 s


5000x5000x5000	1.266071 s	197.461352 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.308127893 s


5000x5000x5000	1.308128 s	191.112812 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.628168990 s


5000x5000x5000	0.628169 s	397.982078 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.617668890 s


5000x5000x5000	0.617669 s	404.747599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.670231550 s


5000x5000x5000	0.670232 s	373.005419 GFLOPS
File saved successfully
Number of cores = 3 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.254559280 s


5000x5000x5000	1.254559 s	199.273166 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.265397467 s


5000x5000x5000	1.265397 s	197.566383 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.308056110 s


5000x5000x5000	1.308056 s	191.123300 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.627156645 s


5000x5000x5000	0.627157 s	398.624494 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.617315582 s


5000x5000x5000	0.617316 s	404.979248 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.671960928 s


5000x5000x5000	0.671961 s	372.045441 GFLOPS
File saved successfully
Number of cores = 3 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.255446054 s


5000x5000x5000	1.255446 s	199.132411 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.268350435 s


5000x5000x5000	1.268350 s	197.106409 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.309348860 s


5000x5000x5000	1.309349 s	190.934599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.627123471 s


5000x5000x5000	0.627123 s	398.645580 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.616811350 s


5000x5000x5000	0.616811 s	405.310311 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.674022011 s


5000x5000x5000	0.674022 s	370.907768 GFLOPS
File saved successfully
Number of cores = 3 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.254998766 s


5000x5000x5000	1.254999 s	199.203383 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.275189070 s


5000x5000x5000	1.275189 s	196.049359 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.308222344 s


5000x5000x5000	1.308222 s	191.099014 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.627541892 s


5000x5000x5000	0.627542 s	398.379779 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.617756751 s


5000x5000x5000	0.617757 s	404.690033 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.672595251 s


5000x5000x5000	0.672595 s	371.694566 GFLOPS
File saved successfully
Number of cores = 3 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.256253310 s


5000x5000x5000	1.256253 s	199.004451 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.264393835 s


5000x5000x5000	1.264394 s	197.723204 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.308899843 s


5000x5000x5000	1.308900 s	191.000099 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.628109590 s


5000x5000x5000	0.628110 s	398.019715 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.618238762 s


5000x5000x5000	0.618239 s	404.374516 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.672770102 s


5000x5000x5000	0.672770 s	371.597964 GFLOPS
File saved successfully
Number of cores = 3 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.928118922 s


5000x5000x5000	0.928119 s	269.362033 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.928456792 s


5000x5000x5000	0.928457 s	269.264011 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.982684339 s


5000x5000x5000	0.982684 s	254.405194 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.489997659 s


5000x5000x5000	0.489998 s	510.206519 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.467220205 s


5000x5000x5000	0.467220 s	535.079599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.510035576 s


5000x5000x5000	0.510036 s	490.161886 GFLOPS
File saved successfully
Number of cores = 4 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.927632301 s


5000x5000x5000	0.927632 s	269.503336 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.930586628 s


5000x5000x5000	0.930587 s	268.647746 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.981996664 s


5000x5000x5000	0.981997 s	254.583350 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.490017422 s


5000x5000x5000	0.490017 s	510.185942 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.465432168 s


5000x5000x5000	0.465432 s	537.135199 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.507136185 s


5000x5000x5000	0.507136 s	492.964232 GFLOPS
File saved successfully
Number of cores = 4 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.928715196 s


5000x5000x5000	0.928715 s	269.189092 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.926219310 s


5000x5000x5000	0.926219 s	269.914476 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.982534009 s


5000x5000x5000	0.982534 s	254.444119 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.490509966 s


5000x5000x5000	0.490510 s	509.673640 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.471394754 s


5000x5000x5000	0.471395 s	530.341074 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.511600881 s


5000x5000x5000	0.511601 s	488.662176 GFLOPS
File saved successfully
Number of cores = 4 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.928287364 s


5000x5000x5000	0.928287 s	269.313156 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.932301530 s


5000x5000x5000	0.932302 s	268.153588 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.982147772 s


5000x5000x5000	0.982148 s	254.544181 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.489625604 s


5000x5000x5000	0.489626 s	510.594213 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.470947505 s


5000x5000x5000	0.470948 s	530.844728 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.506724217 s


5000x5000x5000	0.506724 s	493.365013 GFLOPS
File saved successfully
Number of cores = 4 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.927700670 s


5000x5000x5000	0.927701 s	269.483475 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.922836174 s


5000x5000x5000	0.922836 s	270.903988 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.981795984 s


5000x5000x5000	0.981796 s	254.635387 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.489490129 s


5000x5000x5000	0.489490 s	510.735529 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.466364620 s


5000x5000x5000	0.466365 s	536.061248 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.510817204 s


5000x5000x5000	0.510817 s	489.411864 GFLOPS
File saved successfully
Number of cores = 4 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.755296001 s


5000x5000x5000	0.755296 s	330.996059 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.756400395 s


5000x5000x5000	0.756400 s	330.512784 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.820999706 s


5000x5000x5000	0.821000 s	304.506808 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.390239881 s


5000x5000x5000	0.390240 s	640.631602 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380268517 s


5000x5000x5000	0.380269 s	657.430181 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.427637630 s


5000x5000x5000	0.427638 s	584.607112 GFLOPS
File saved successfully
Number of cores = 5 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.756370819 s


5000x5000x5000	0.756371 s	330.525707 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.757752970 s


5000x5000x5000	0.757753 s	329.922824 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.820817195 s


5000x5000x5000	0.820817 s	304.574516 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.388598335 s


5000x5000x5000	0.388598 s	643.337805 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380236273 s


5000x5000x5000	0.380236 s	657.485931 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.428751336 s


5000x5000x5000	0.428751 s	583.088562 GFLOPS
File saved successfully
Number of cores = 5 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.755099698 s


5000x5000x5000	0.755100 s	331.082108 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.752836741 s


5000x5000x5000	0.752837 s	332.077310 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.820798915 s


5000x5000x5000	0.820799 s	304.581299 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.388582701 s


5000x5000x5000	0.388583 s	643.363689 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.382543016 s


5000x5000x5000	0.382543 s	653.521276 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.430244226 s


5000x5000x5000	0.430244 s	581.065323 GFLOPS
File saved successfully
Number of cores = 5 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.755355581 s


5000x5000x5000	0.755356 s	330.969951 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.759235002 s


5000x5000x5000	0.759235 s	329.278813 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.820150786 s


5000x5000x5000	0.820151 s	304.821996 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.388440058 s


5000x5000x5000	0.388440 s	643.599945 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380763321 s


5000x5000x5000	0.380763 s	656.575847 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.429286519 s


5000x5000x5000	0.429287 s	582.361637 GFLOPS
File saved successfully
Number of cores = 5 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.755596790 s


5000x5000x5000	0.755597 s	330.864296 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.753260645 s


5000x5000x5000	0.753261 s	331.890431 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.819590357 s


5000x5000x5000	0.819590 s	305.030431 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.388356339 s


5000x5000x5000	0.388356 s	643.738688 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.382917779 s


5000x5000x5000	0.382918 s	652.881673 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.430363169 s


5000x5000x5000	0.430363 s	580.904729 GFLOPS
File saved successfully
Number of cores = 5 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.619980415 s


5000x5000x5000	0.619980 s	403.238544 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.624950214 s


5000x5000x5000	0.624950 s	400.031866 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.659874479 s


5000x5000x5000	0.659874 s	378.859932 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.321674305 s


5000x5000x5000	0.321674 s	777.183617 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.316802515 s


5000x5000x5000	0.316803 s	789.135149 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.343661594 s


5000x5000x5000	0.343662 s	727.459816 GFLOPS
File saved successfully
Number of cores = 6 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.621023981 s


5000x5000x5000	0.621024 s	402.560944 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.629269372 s


5000x5000x5000	0.629269 s	397.286140 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.659495132 s


5000x5000x5000	0.659495 s	379.077855 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.321415815 s


5000x5000x5000	0.321416 s	777.808646 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317645122 s


5000x5000x5000	0.317645 s	787.041836 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.347748686 s


5000x5000x5000	0.347749 s	718.909977 GFLOPS
File saved successfully
Number of cores = 6 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.620294868 s


5000x5000x5000	0.620295 s	403.034126 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.619322758 s


5000x5000x5000	0.619323 s	403.666742 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.660004753 s


5000x5000x5000	0.660005 s	378.785151 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.321344956 s


5000x5000x5000	0.321345 s	777.980159 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.316665002 s


5000x5000x5000	0.316665 s	789.477834 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.344967675 s


5000x5000x5000	0.344968 s	724.705583 GFLOPS
File saved successfully
Number of cores = 6 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.620599716 s


5000x5000x5000	0.620600 s	402.836150 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.621996610 s


5000x5000x5000	0.621997 s	401.931451 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.659037674 s


5000x5000x5000	0.659038 s	379.340984 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.321763836 s


5000x5000x5000	0.321764 s	776.967366 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317986055 s


5000x5000x5000	0.317986 s	786.197999 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.347591065 s


5000x5000x5000	0.347591 s	719.235979 GFLOPS
File saved successfully
Number of cores = 6 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.620563168 s


5000x5000x5000	0.620563 s	402.859875 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.622350845 s


5000x5000x5000	0.622351 s	401.702676 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.659687300 s


5000x5000x5000	0.659687 s	378.967429 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.321297713 s


5000x5000x5000	0.321298 s	778.094552 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317348844 s


5000x5000x5000	0.317349 s	787.776621 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.342448941 s


5000x5000x5000	0.342449 s	730.035839 GFLOPS
File saved successfully
Number of cores = 6 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.541173892 s


5000x5000x5000	0.541174 s	461.958723 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.539451512 s


5000x5000x5000	0.539452 s	463.433681 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.586879643 s


5000x5000x5000	0.586880 s	425.981720 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279548106 s


5000x5000x5000	0.279548 s	894.300461 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.273004092 s


5000x5000x5000	0.273004 s	915.737190 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.318502591 s


5000x5000x5000	0.318503 s	784.922971 GFLOPS
File saved successfully
Number of cores = 7 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.540344332 s


5000x5000x5000	0.540344 s	462.667942 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.539700885 s


5000x5000x5000	0.539701 s	463.219548 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.586968247 s


5000x5000x5000	0.586968 s	425.917418 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279658691 s


5000x5000x5000	0.279659 s	893.946829 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.275004460 s


5000x5000x5000	0.275004 s	909.076166 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317717798 s


5000x5000x5000	0.317718 s	786.861805 GFLOPS
File saved successfully
Number of cores = 7 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.539972455 s


5000x5000x5000	0.539972 s	462.986580 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.537623123 s


5000x5000x5000	0.537623 s	465.009761 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.586869640 s


5000x5000x5000	0.586870 s	425.988981 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279922433 s


5000x5000x5000	0.279922 s	893.104555 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.280839428 s


5000x5000x5000	0.280839 s	890.188396 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.318596093 s


5000x5000x5000	0.318596 s	784.692611 GFLOPS
File saved successfully
Number of cores = 7 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.540030124 s


5000x5000x5000	0.540030 s	462.937138 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.547158806 s


5000x5000x5000	0.547159 s	456.905742 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.586365204 s


5000x5000x5000	0.586365 s	426.355449 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279356813 s


5000x5000x5000	0.279357 s	894.912844 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.272630272 s


5000x5000x5000	0.272630 s	916.992813 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317274206 s


5000x5000x5000	0.317274 s	787.961944 GFLOPS
File saved successfully
Number of cores = 7 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.539984031 s


5000x5000x5000	0.539984 s	462.976654 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.541063872 s


5000x5000x5000	0.541064 s	462.052658 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.586378427 s


5000x5000x5000	0.586378 s	426.345835 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279052999 s


5000x5000x5000	0.279053 s	895.887164 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.272978742 s


5000x5000x5000	0.272979 s	915.822229 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.317390982 s


5000x5000x5000	0.317391 s	787.672033 GFLOPS
File saved successfully
Number of cores = 7 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476743251 s


5000x5000x5000	0.476743 s	524.391272 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476477001 s


5000x5000x5000	0.476477 s	524.684296 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.532325591 s


5000x5000x5000	0.532326 s	469.637388 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257633983 s


5000x5000x5000	0.257634 s	970.368882 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241003839 s


5000x5000x5000	0.241004 s	1037.327874 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.280888415 s


5000x5000x5000	0.280888 s	890.033147 GFLOPS
File saved successfully
Number of cores = 8 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476780206 s


5000x5000x5000	0.476780 s	524.350627 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.478818558 s


5000x5000x5000	0.478819 s	522.118443 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.531666922 s


5000x5000x5000	0.531667 s	470.219210 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258264291 s


5000x5000x5000	0.258264 s	968.000644 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242507347 s


5000x5000x5000	0.242507 s	1030.896602 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.280737256 s


5000x5000x5000	0.280737 s	890.512373 GFLOPS
File saved successfully
Number of cores = 8 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476933043 s


5000x5000x5000	0.476933 s	524.182595 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.478802556 s


5000x5000x5000	0.478803 s	522.135893 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.532031257 s


5000x5000x5000	0.532031 s	469.897204 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257358749 s


5000x5000x5000	0.257359 s	971.406649 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241512689 s


5000x5000x5000	0.241513 s	1035.142298 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.281587511 s


5000x5000x5000	0.281588 s	887.823466 GFLOPS
File saved successfully
Number of cores = 8 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.477006129 s


5000x5000x5000	0.477006 s	524.102280 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476103971 s


5000x5000x5000	0.476104 s	525.095389 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.531567126 s


5000x5000x5000	0.531567 s	470.307489 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258318401 s


5000x5000x5000	0.258318 s	967.797877 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.243283528 s


5000x5000x5000	0.243284 s	1027.607590 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279905425 s


5000x5000x5000	0.279905 s	893.158823 GFLOPS
File saved successfully
Number of cores = 8 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.476861499 s


5000x5000x5000	0.476861 s	524.261238 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.475958560 s


5000x5000x5000	0.475959 s	525.255812 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.531797154 s


5000x5000x5000	0.531797 s	470.104058 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257943645 s


5000x5000x5000	0.257944 s	969.203952 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242331493 s


5000x5000x5000	0.242331 s	1031.644698 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.281704911 s


5000x5000x5000	0.281705 s	887.453467 GFLOPS
File saved successfully
Number of cores = 8 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.422054176 s


5000x5000x5000	0.422054 s	592.341017 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.423784181 s


5000x5000x5000	0.423784 s	589.922916 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.493277060 s


5000x5000x5000	0.493277 s	506.814568 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.221113507 s


5000x5000x5000	0.221114 s	1130.641015 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.215800680 s


5000x5000x5000	0.215801 s	1158.476424 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257351444 s


5000x5000x5000	0.257351 s	971.434223 GFLOPS
File saved successfully
Number of cores = 9 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.422464706 s


5000x5000x5000	0.422465 s	591.765410 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.426956377 s


5000x5000x5000	0.426956 s	585.539913 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.492253681 s


5000x5000x5000	0.492254 s	507.868218 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.221053506 s


5000x5000x5000	0.221054 s	1130.947907 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216113185 s


5000x5000x5000	0.216113 s	1156.801238 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258176799 s


5000x5000x5000	0.258177 s	968.328684 GFLOPS
File saved successfully
Number of cores = 9 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.422411892 s


5000x5000x5000	0.422412 s	591.839398 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.424612302 s


5000x5000x5000	0.424612 s	588.772390 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.490951663 s


5000x5000x5000	0.490952 s	509.215100 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.221290382 s


5000x5000x5000	0.221290 s	1129.737306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.215990262 s


5000x5000x5000	0.215990 s	1157.459590 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.256744184 s


5000x5000x5000	0.256744 s	973.731892 GFLOPS
File saved successfully
Number of cores = 9 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.422432167 s


5000x5000x5000	0.422432 s	591.810992 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.431368885 s


5000x5000x5000	0.431369 s	579.550377 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.492689461 s


5000x5000x5000	0.492689 s	507.419013 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.220972842 s


5000x5000x5000	0.220973 s	1131.360749 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216534503 s


5000x5000x5000	0.216535 s	1154.550414 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258305475 s


5000x5000x5000	0.258305 s	967.846307 GFLOPS
File saved successfully
Number of cores = 9 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.422452376 s


5000x5000x5000	0.422452 s	591.782682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.426118387 s


5000x5000x5000	0.426118 s	586.691416 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.491857067 s


5000x5000x5000	0.491857 s	508.277743 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.231184090 s


5000x5000x5000	0.231184 s	1081.389295 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216686588 s


5000x5000x5000	0.216687 s	1153.740074 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.256486048 s


5000x5000x5000	0.256486 s	974.711888 GFLOPS
File saved successfully
Number of cores = 9 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380693827 s


5000x5000x5000	0.380694 s	656.695702 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.386532634 s


5000x5000x5000	0.386533 s	646.775920 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.423960902 s


5000x5000x5000	0.423961 s	589.677017 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200075375 s


5000x5000x5000	0.200075 s	1249.529084 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201118801 s


5000x5000x5000	0.201119 s	1243.046392 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222717778 s


5000x5000x5000	0.222718 s	1122.496831 GFLOPS
File saved successfully
Number of cores = 10 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380679678 s


5000x5000x5000	0.380680 s	656.720110 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.388788666 s


5000x5000x5000	0.388789 s	643.022860 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.424065147 s


5000x5000x5000	0.424065 s	589.532061 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200112762 s


5000x5000x5000	0.200113 s	1249.295635 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201702411 s


5000x5000x5000	0.201702 s	1239.449736 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222319518 s


5000x5000x5000	0.222320 s	1124.507656 GFLOPS
File saved successfully
Number of cores = 10 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380956369 s


5000x5000x5000	0.380956 s	656.243130 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.386919704 s


5000x5000x5000	0.386920 s	646.128893 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.424133245 s


5000x5000x5000	0.424133 s	589.437407 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200284661 s


5000x5000x5000	0.200285 s	1248.223397 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201079044 s


5000x5000x5000	0.201079 s	1243.292165 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.223248894 s


5000x5000x5000	0.223249 s	1119.826376 GFLOPS
File saved successfully
Number of cores = 10 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380912665 s


5000x5000x5000	0.380913 s	656.318424 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.385174376 s


5000x5000x5000	0.385174 s	649.056676 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.424248031 s


5000x5000x5000	0.424248 s	589.277926 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200479444 s


5000x5000x5000	0.200479 s	1247.010641 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200775751 s


5000x5000x5000	0.200776 s	1245.170290 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222359985 s


5000x5000x5000	0.222360 s	1124.303008 GFLOPS
File saved successfully
Number of cores = 10 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.380645344 s


5000x5000x5000	0.380645 s	656.779346 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.385466579 s


5000x5000x5000	0.385467 s	648.564658 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.424508650 s


5000x5000x5000	0.424509 s	588.916150 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200130023 s


5000x5000x5000	0.200130 s	1249.187884 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201430533 s


5000x5000x5000	0.201431 s	1241.122665 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.223225546 s


5000x5000x5000	0.223226 s	1119.943503 GFLOPS
File saved successfully
Number of cores = 10 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.346167268 s


5000x5000x5000	0.346167 s	722.194220 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.352394752 s


5000x5000x5000	0.352395 s	709.431677 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.400556380 s


5000x5000x5000	0.400556 s	624.131864 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185818740 s


5000x5000x5000	0.185819 s	1345.397133 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.186045191 s


5000x5000x5000	0.186045 s	1343.759539 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216696702 s


5000x5000x5000	0.216697 s	1153.686225 GFLOPS
File saved successfully
Number of cores = 11 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.345635986 s


5000x5000x5000	0.345636 s	723.304315 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.353104161 s


5000x5000x5000	0.353104 s	708.006383 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.400922513 s


5000x5000x5000	0.400923 s	623.561890 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185351458 s


5000x5000x5000	0.185351 s	1348.788959 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.186370342 s


5000x5000x5000	0.186370 s	1341.415149 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.213478103 s


5000x5000x5000	0.213478 s	1171.080296 GFLOPS
File saved successfully
Number of cores = 11 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.345622136 s


5000x5000x5000	0.345622 s	723.333299 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351837575 s


5000x5000x5000	0.351838 s	710.555147 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.400625396 s


5000x5000x5000	0.400625 s	624.024344 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185714328 s


5000x5000x5000	0.185714 s	1346.153540 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187497326 s


5000x5000x5000	0.187497 s	1333.352349 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.213028982 s


5000x5000x5000	0.213029 s	1173.549240 GFLOPS
File saved successfully
Number of cores = 11 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.345704615 s


5000x5000x5000	0.345705 s	723.160725 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.354612213 s


5000x5000x5000	0.354612 s	704.995459 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.401733463 s


5000x5000x5000	0.401733 s	622.303151 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.186002055 s


5000x5000x5000	0.186002 s	1344.071172 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.186022673 s


5000x5000x5000	0.186023 s	1343.922200 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.212030052 s


5000x5000x5000	0.212030 s	1179.078143 GFLOPS
File saved successfully
Number of cores = 11 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.345863335 s


5000x5000x5000	0.345863 s	722.828860 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.352792253 s


5000x5000x5000	0.352792 s	708.632341 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.401004793 s


5000x5000x5000	0.401005 s	623.433945 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185397222 s


5000x5000x5000	0.185397 s	1348.456019 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185878115 s


5000x5000x5000	0.185878 s	1344.967373 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.211712343 s


5000x5000x5000	0.211712 s	1180.847543 GFLOPS
File saved successfully
Number of cores = 11 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.315629925 s


5000x5000x5000	0.315630 s	792.066849 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.329662316 s


5000x5000x5000	0.329662 s	758.351767 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351985532 s


5000x5000x5000	0.351986 s	710.256466 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167418256 s


5000x5000x5000	0.167418 s	1493.266063 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164547578 s


5000x5000x5000	0.164548 s	1519.317410 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187425606 s


5000x5000x5000	0.187426 s	1333.862567 GFLOPS
File saved successfully
Number of cores = 12 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.316112552 s


5000x5000x5000	0.316113 s	790.857555 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.325984299 s


5000x5000x5000	0.325984 s	766.908102 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351047743 s


5000x5000x5000	0.351048 s	712.153845 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167949837 s


5000x5000x5000	0.167950 s	1488.539700 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164961462 s


5000x5000x5000	0.164961 s	1515.505482 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187487339 s


5000x5000x5000	0.187487 s	1333.423373 GFLOPS
File saved successfully
Number of cores = 12 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.315415170 s


5000x5000x5000	0.315415 s	792.606139 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.325394919 s


5000x5000x5000	0.325395 s	768.297184 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.350431547 s


5000x5000x5000	0.350432 s	713.406091 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167101530 s


5000x5000x5000	0.167102 s	1496.096415 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164277317 s


5000x5000x5000	0.164277 s	1521.816916 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187593462 s


5000x5000x5000	0.187593 s	1332.669046 GFLOPS
File saved successfully
Number of cores = 12 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.315150005 s


5000x5000x5000	0.315150 s	793.273032 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.326144958 s


5000x5000x5000	0.326145 s	766.530323 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351587241 s


5000x5000x5000	0.351587 s	711.061071 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167191155 s


5000x5000x5000	0.167191 s	1495.294413 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.165275331 s


5000x5000x5000	0.165275 s	1512.627435 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187215618 s


5000x5000x5000	0.187216 s	1335.358677 GFLOPS
File saved successfully
Number of cores = 12 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.315483954 s


5000x5000x5000	0.315484 s	792.433329 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.326085481 s


5000x5000x5000	0.326085 s	766.670136 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.352112640 s


5000x5000x5000	0.352113 s	710.000073 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167084934 s


5000x5000x5000	0.167085 s	1496.245018 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167018151 s


5000x5000x5000	0.167018 s	1496.843298 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.185447226 s


5000x5000x5000	0.185447 s	1348.092422 GFLOPS
File saved successfully
Number of cores = 12 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.296361687 s


5000x5000x5000	0.296362 s	843.563831 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.310665989 s


5000x5000x5000	0.310666 s	804.722785 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351454619 s


5000x5000x5000	0.351455 s	711.329391 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164927630 s


5000x5000x5000	0.164928 s	1515.816361 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.160116482 s


5000x5000x5000	0.160116 s	1561.363308 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187531631 s


5000x5000x5000	0.187532 s	1333.108440 GFLOPS
File saved successfully
Number of cores = 13 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.296494314 s


5000x5000x5000	0.296494 s	843.186490 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.316669073 s


5000x5000x5000	0.316669 s	789.467685 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351600820 s


5000x5000x5000	0.351601 s	711.033609 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164827306 s


5000x5000x5000	0.164827 s	1516.738980 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.159965211 s


5000x5000x5000	0.159965 s	1562.839810 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187596980 s


5000x5000x5000	0.187597 s	1332.644054 GFLOPS
File saved successfully
Number of cores = 13 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.296917945 s


5000x5000x5000	0.296918 s	841.983464 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.311896036 s


5000x5000x5000	0.311896 s	801.549142 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351500840 s


5000x5000x5000	0.351501 s	711.235854 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164733298 s


5000x5000x5000	0.164733 s	1517.604534 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.167695838 s


5000x5000x5000	0.167696 s	1490.794303 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.186652652 s


5000x5000x5000	0.186653 s	1339.386273 GFLOPS
File saved successfully
Number of cores = 13 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.296905684 s


5000x5000x5000	0.296906 s	842.018235 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.311158909 s


5000x5000x5000	0.311159 s	803.447990 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.352521247 s


5000x5000x5000	0.352521 s	709.177112 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.164944698 s


5000x5000x5000	0.164945 s	1515.659509 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.161835501 s


5000x5000x5000	0.161836 s	1544.778485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.187464149 s


5000x5000x5000	0.187464 s	1333.588323 GFLOPS
File saved successfully
Number of cores = 13 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.296147252 s


5000x5000x5000	0.296147 s	844.174641 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.310896908 s


5000x5000x5000	0.310897 s	804.125077 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.351355627 s


5000x5000x5000	0.351356 s	711.529803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.165040564 s


5000x5000x5000	0.165041 s	1514.779118 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.160885627 s


5000x5000x5000	0.160886 s	1553.898907 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.189569516 s


5000x5000x5000	0.189570 s	1318.777435 GFLOPS
File saved successfully
Number of cores = 13 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.274660444 s


5000x5000x5000	0.274660 s	910.214796 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.278998591 s


5000x5000x5000	0.278999 s	896.061873 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.305654089 s


5000x5000x5000	0.305654 s	817.918062 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.144860063 s


5000x5000x5000	0.144860 s	1725.803474 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.149814706 s


5000x5000x5000	0.149815 s	1668.728035 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.162372253 s


5000x5000x5000	0.162372 s	1539.671929 GFLOPS
File saved successfully
Number of cores = 14 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.275153142 s


5000x5000x5000	0.275153 s	908.584936 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.283437441 s


5000x5000x5000	0.283437 s	882.028850 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.307806716 s


5000x5000x5000	0.307807 s	812.198003 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.144731918 s


5000x5000x5000	0.144732 s	1727.331493 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.151144739 s


5000x5000x5000	0.151145 s	1654.043678 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.162920805 s


5000x5000x5000	0.162921 s	1534.487876 GFLOPS
File saved successfully
Number of cores = 14 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.275119198 s


5000x5000x5000	0.275119 s	908.697037 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.279663216 s


5000x5000x5000	0.279663 s	893.932365 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.304655618 s


5000x5000x5000	0.304656 s	820.598687 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.144484768 s


5000x5000x5000	0.144485 s	1730.286199 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.149596290 s


5000x5000x5000	0.149596 s	1671.164439 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.162593951 s


5000x5000x5000	0.162594 s	1537.572576 GFLOPS
File saved successfully
Number of cores = 14 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.275418018 s


5000x5000x5000	0.275418 s	907.711129 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.281454553 s


5000x5000x5000	0.281455 s	888.242870 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.304221346 s


5000x5000x5000	0.304221 s	821.770081 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.145610430 s


5000x5000x5000	0.145610 s	1716.909977 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148785021 s


5000x5000x5000	0.148785 s	1680.276672 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.162724504 s


5000x5000x5000	0.162725 s	1536.338989 GFLOPS
File saved successfully
Number of cores = 14 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.274514743 s


5000x5000x5000	0.274515 s	910.697900 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.280292265 s


5000x5000x5000	0.280292 s	891.926147 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.306088600 s


5000x5000x5000	0.306089 s	816.756978 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.145239725 s


5000x5000x5000	0.145240 s	1721.292160 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.149445876 s


5000x5000x5000	0.149446 s	1672.846429 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.161970777 s


5000x5000x5000	0.161971 s	1543.488305 GFLOPS
File saved successfully
Number of cores = 14 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257666754 s


5000x5000x5000	0.257667 s	970.245467 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258470595 s


5000x5000x5000	0.258471 s	967.228013 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.285453906 s


5000x5000x5000	0.285454 s	875.798140 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.135461381 s


5000x5000x5000	0.135461 s	1845.544451 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.134269020 s


5000x5000x5000	0.134269 s	1861.933602 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.156366252 s


5000x5000x5000	0.156366 s	1598.810465 GFLOPS
File saved successfully
Number of cores = 15 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.258218997 s


5000x5000x5000	0.258219 s	968.170440 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.263458460 s


5000x5000x5000	0.263458 s	948.916197 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.282936610 s


5000x5000x5000	0.282937 s	883.590144 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.135768565 s


5000x5000x5000	0.135769 s	1841.368803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.134791799 s


5000x5000x5000	0.134792 s	1854.712244 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.157484368 s


5000x5000x5000	0.157484 s	1587.459144 GFLOPS
File saved successfully
Number of cores = 15 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257639879 s


5000x5000x5000	0.257640 s	970.346675 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.261410037 s


5000x5000x5000	0.261410 s	956.351955 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.289186654 s


5000x5000x5000	0.289187 s	864.493560 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.136029098 s


5000x5000x5000	0.136029 s	1837.842077 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.135279310 s


5000x5000x5000	0.135279 s	1848.028350 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.156624130 s


5000x5000x5000	0.156624 s	1596.178060 GFLOPS
File saved successfully
Number of cores = 15 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257527460 s


5000x5000x5000	0.257527 s	970.770263 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.259664172 s


5000x5000x5000	0.259664 s	962.782035 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.283578739 s


5000x5000x5000	0.283579 s	881.589363 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.135803024 s


5000x5000x5000	0.135803 s	1840.901569 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.134301957 s


5000x5000x5000	0.134302 s	1861.476970 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.154193892 s


5000x5000x5000	0.154194 s	1621.335299 GFLOPS
File saved successfully
Number of cores = 15 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.257301073 s


5000x5000x5000	0.257301 s	971.624397 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.264194426 s


5000x5000x5000	0.264194 s	946.272803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.283212935 s


5000x5000x5000	0.283213 s	882.728043 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.135801537 s


5000x5000x5000	0.135802 s	1840.921727 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.134320009 s


5000x5000x5000	0.134320 s	1861.226796 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.153945768 s


5000x5000x5000	0.153946 s	1623.948506 GFLOPS
File saved successfully
Number of cores = 15 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.243185900 s


5000x5000x5000	0.243186 s	1028.020128 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.247135998 s


5000x5000x5000	0.247136 s	1011.588769 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.285800886 s


5000x5000x5000	0.285801 s	874.734867 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.131011250 s


5000x5000x5000	0.131011 s	1908.233072 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.129469287 s


5000x5000x5000	0.129469 s	1930.959889 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.149418711 s


5000x5000x5000	0.149419 s	1673.150560 GFLOPS
File saved successfully
Number of cores = 16 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242528747 s


5000x5000x5000	0.242529 s	1030.805639 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.251881534 s


5000x5000x5000	0.251882 s	992.530084 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.286836432 s


5000x5000x5000	0.286836 s	871.576871 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.130545488 s


5000x5000x5000	0.130545 s	1915.041292 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.128168309 s


5000x5000x5000	0.128168 s	1950.560181 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148184461 s


5000x5000x5000	0.148184 s	1687.086475 GFLOPS
File saved successfully
Number of cores = 16 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242855937 s


5000x5000x5000	0.242856 s	1029.416876 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.247683808 s


5000x5000x5000	0.247684 s	1009.351407 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.285750872 s


5000x5000x5000	0.285751 s	874.887969 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.130394714 s


5000x5000x5000	0.130395 s	1917.255634 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.128702824 s


5000x5000x5000	0.128703 s	1942.459320 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148963867 s


5000x5000x5000	0.148964 s	1678.259333 GFLOPS
File saved successfully
Number of cores = 16 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242977939 s


5000x5000x5000	0.242978 s	1028.899994 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.247494374 s


5000x5000x5000	0.247494 s	1010.123972 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.285893998 s


5000x5000x5000	0.285894 s	874.449977 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.130731373 s


5000x5000x5000	0.130731 s	1912.318323 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.128541069 s


5000x5000x5000	0.128541 s	1944.903695 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.149413919 s


5000x5000x5000	0.149414 s	1673.204221 GFLOPS
File saved successfully
Number of cores = 16 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.242571245 s


5000x5000x5000	0.242571 s	1030.625044 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.249081079 s


5000x5000x5000	0.249081 s	1003.689244 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.285295692 s


5000x5000x5000	0.285296 s	876.283824 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.131004924 s


5000x5000x5000	0.131005 s	1908.325217 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.128990667 s


5000x5000x5000	0.128991 s	1938.124717 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148963026 s


5000x5000x5000	0.148963 s	1678.268807 GFLOPS
File saved successfully
Number of cores = 16 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230568614 s


5000x5000x5000	0.230569 s	1084.275937 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241714388 s


5000x5000x5000	0.241714 s	1034.278522 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.287970211 s


5000x5000x5000	0.287970 s	868.145351 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122820028 s


5000x5000x5000	0.122820 s	2035.498640 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121696311 s


5000x5000x5000	0.121696 s	2054.293988 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.147794906 s


5000x5000x5000	0.147795 s	1691.533266 GFLOPS
File saved successfully
Number of cores = 17 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230548498 s


5000x5000x5000	0.230548 s	1084.370543 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.240776310 s


5000x5000x5000	0.240776 s	1038.308129 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.287049826 s


5000x5000x5000	0.287050 s	870.928938 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122778423 s


5000x5000x5000	0.122778 s	2036.188394 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121355517 s


5000x5000x5000	0.121356 s	2060.062914 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148713239 s


5000x5000x5000	0.148713 s	1681.087721 GFLOPS
File saved successfully
Number of cores = 17 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230187920 s


5000x5000x5000	0.230188 s	1086.069156 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.240831352 s


5000x5000x5000	0.240831 s	1038.070824 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.286366883 s


5000x5000x5000	0.286367 s	873.005975 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.123235563 s


5000x5000x5000	0.123236 s	2028.635192 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.126804780 s


5000x5000x5000	0.126805 s	1971.534512 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148837970 s


5000x5000x5000	0.148838 s	1679.678915 GFLOPS
File saved successfully
Number of cores = 17 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230593578 s


5000x5000x5000	0.230594 s	1084.158554 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241286832 s


5000x5000x5000	0.241287 s	1036.111245 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.287691045 s


5000x5000x5000	0.287691 s	868.987771 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122422804 s


5000x5000x5000	0.122423 s	2042.103202 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122018728 s


5000x5000x5000	0.122019 s	2048.865810 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148580175 s


5000x5000x5000	0.148580 s	1682.593253 GFLOPS
File saved successfully
Number of cores = 17 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230828414 s


5000x5000x5000	0.230828 s	1083.055572 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241226698 s


5000x5000x5000	0.241227 s	1036.369532 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.286158884 s


5000x5000x5000	0.286159 s	873.640533 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.123400002 s


5000x5000x5000	0.123400 s	2025.931896 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121608981 s


5000x5000x5000	0.121609 s	2055.769220 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.148897727 s


5000x5000x5000	0.148898 s	1679.004811 GFLOPS
File saved successfully
Number of cores = 17 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216784250 s


5000x5000x5000	0.216784 s	1153.220310 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.228837334 s


5000x5000x5000	0.228837 s	1092.479079 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.266047984 s


5000x5000x5000	0.266048 s	939.680114 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.116103353 s


5000x5000x5000	0.116103 s	2153.253920 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.115798200 s


5000x5000x5000	0.115798 s	2158.928204 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141434807 s


5000x5000x5000	0.141435 s	1767.598834 GFLOPS
File saved successfully
Number of cores = 18 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216639977 s


5000x5000x5000	0.216640 s	1153.988306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230445759 s


5000x5000x5000	0.230446 s	1084.853985 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.265326591 s


5000x5000x5000	0.265327 s	942.234998 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.116055823 s


5000x5000x5000	0.116056 s	2154.135773 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.114570618 s


5000x5000x5000	0.114571 s	2182.060325 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141984532 s


5000x5000x5000	0.141985 s	1760.755179 GFLOPS
File saved successfully
Number of cores = 18 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216819236 s


5000x5000x5000	0.216819 s	1153.034226 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.229512572 s


5000x5000x5000	0.229513 s	1089.264949 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.264313477 s


5000x5000x5000	0.264313 s	945.846587 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.115075913 s


5000x5000x5000	0.115076 s	2172.478962 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.114583683 s


5000x5000x5000	0.114584 s	2181.811524 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141749011 s


5000x5000x5000	0.141749 s	1763.680736 GFLOPS
File saved successfully
Number of cores = 18 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216466055 s


5000x5000x5000	0.216466 s	1154.915490 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.229042476 s


5000x5000x5000	0.229042 s	1091.500600 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.264500026 s


5000x5000x5000	0.264500 s	945.179491 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.115606389 s


5000x5000x5000	0.115606 s	2162.510240 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.116053920 s


5000x5000x5000	0.116054 s	2154.171096 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141378249 s


5000x5000x5000	0.141378 s	1768.305958 GFLOPS
File saved successfully
Number of cores = 18 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.217009301 s


5000x5000x5000	0.217009 s	1152.024355 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.230514890 s


5000x5000x5000	0.230515 s	1084.528639 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.265247308 s


5000x5000x5000	0.265247 s	942.516634 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.116719929 s


5000x5000x5000	0.116720 s	2141.879302 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.114386818 s


5000x5000x5000	0.114387 s	2185.566522 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141381363 s


5000x5000x5000	0.141381 s	1768.267010 GFLOPS
File saved successfully
Number of cores = 18 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207428736 s


5000x5000x5000	0.207429 s	1205.233204 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.220362785 s


5000x5000x5000	0.220363 s	1134.492832 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.265452567 s


5000x5000x5000	0.265453 s	941.787841 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.110540308 s


5000x5000x5000	0.110540 s	2261.618450 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.111790837 s


5000x5000x5000	0.111791 s	2236.319243 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.140351268 s


5000x5000x5000	0.140351 s	1781.245040 GFLOPS
File saved successfully
Number of cores = 19 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207496003 s


5000x5000x5000	0.207496 s	1204.842486 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.219454216 s


5000x5000x5000	0.219454 s	1139.189780 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.263991102 s


5000x5000x5000	0.263991 s	947.001615 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.110849921 s


5000x5000x5000	0.110850 s	2255.301562 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.114838416 s


5000x5000x5000	0.114838 s	2176.971859 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141641755 s


5000x5000x5000	0.141642 s	1765.016255 GFLOPS
File saved successfully
Number of cores = 19 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207388057 s


5000x5000x5000	0.207388 s	1205.469609 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.220430171 s


5000x5000x5000	0.220430 s	1134.146015 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.264846579 s


5000x5000x5000	0.264847 s	943.942719 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.110660059 s


5000x5000x5000	0.110660 s	2259.171035 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.111623370 s


5000x5000x5000	0.111623 s	2239.674362 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.143127583 s


5000x5000x5000	0.143128 s	1746.693368 GFLOPS
File saved successfully
Number of cores = 19 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207386205 s


5000x5000x5000	0.207386 s	1205.480374 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.220955086 s


5000x5000x5000	0.220955 s	1131.451665 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.265196370 s


5000x5000x5000	0.265196 s	942.697670 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.110053851 s


5000x5000x5000	0.110054 s	2271.615193 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.112136170 s


5000x5000x5000	0.112136 s	2229.432305 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.140860192 s


5000x5000x5000	0.140860 s	1774.809451 GFLOPS
File saved successfully
Number of cores = 19 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207266575 s


5000x5000x5000	0.207267 s	1206.176153 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.219903264 s


5000x5000x5000	0.219903 s	1136.863526 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.264823325 s


5000x5000x5000	0.264823 s	944.025607 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.110282465 s


5000x5000x5000	0.110282 s	2266.906167 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.112411645 s


5000x5000x5000	0.112412 s	2223.968878 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.141970978 s


5000x5000x5000	0.141971 s	1760.923278 GFLOPS
File saved successfully
Number of cores = 19 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.197349513 s


5000x5000x5000	0.197350 s	1266.788026 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.217898358 s


5000x5000x5000	0.217898 s	1147.323928 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.240684254 s


5000x5000x5000	0.240684 s	1038.705257 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107419998 s


5000x5000x5000	0.107420 s	2327.313393 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.106384131 s


5000x5000x5000	0.106384 s	2349.974546 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122618449 s


5000x5000x5000	0.122618 s	2038.844905 GFLOPS
File saved successfully
Number of cores = 20 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.197832518 s


5000x5000x5000	0.197833 s	1263.695183 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216300654 s


5000x5000x5000	0.216301 s	1155.798632 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.240398982 s


5000x5000x5000	0.240399 s	1039.937848 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107301754 s


5000x5000x5000	0.107302 s	2329.878037 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.106655789 s


5000x5000x5000	0.106656 s	2343.989036 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.123670199 s


5000x5000x5000	0.123670 s	2021.505601 GFLOPS
File saved successfully
Number of cores = 20 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.197689893 s


5000x5000x5000	0.197690 s	1264.606886 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.216692424 s


5000x5000x5000	0.216692 s	1153.709001 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241301496 s


5000x5000x5000	0.241301 s	1036.048280 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107365088 s


5000x5000x5000	0.107365 s	2328.503657 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107584169 s


5000x5000x5000	0.107584 s	2323.761965 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.123753027 s


5000x5000x5000	0.123753 s	2020.152606 GFLOPS
File saved successfully
Number of cores = 20 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.197559705 s


5000x5000x5000	0.197560 s	1265.440237 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.218277496 s


5000x5000x5000	0.218277 s	1145.331079 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241348885 s


5000x5000x5000	0.241349 s	1035.844852 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107014007 s


5000x5000x5000	0.107014 s	2336.142782 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107031460 s


5000x5000x5000	0.107031 s	2335.761840 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.123305496 s


5000x5000x5000	0.123305 s	2027.484647 GFLOPS
File saved successfully
Number of cores = 20 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.197590242 s


5000x5000x5000	0.197590 s	1265.244667 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.218641148 s


5000x5000x5000	0.218641 s	1143.426122 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.241311670 s


5000x5000x5000	0.241312 s	1036.004599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.107754202 s


5000x5000x5000	0.107754 s	2320.095137 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.108463928 s


5000x5000x5000	0.108464 s	2304.913759 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.124443715 s


5000x5000x5000	0.124444 s	2008.940347 GFLOPS
File saved successfully
Number of cores = 20 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.189003224 s


5000x5000x5000	0.189003 s	1322.728759 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.206400903 s


5000x5000x5000	0.206401 s	1211.235011 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222628155 s


5000x5000x5000	0.222628 s	1122.948712 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.103331364 s


5000x5000x5000	0.103331 s	2419.400948 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102324909 s


5000x5000x5000	0.102325 s	2443.197873 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118380600 s


5000x5000x5000	0.118381 s	2111.832513 GFLOPS
File saved successfully
Number of cores = 21 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.189229787 s


5000x5000x5000	0.189230 s	1321.145069 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.205381827 s


5000x5000x5000	0.205382 s	1217.244990 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.223459669 s


5000x5000x5000	0.223460 s	1118.770117 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.103885115 s


5000x5000x5000	0.103885 s	2406.504531 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102506847 s


5000x5000x5000	0.102507 s	2438.861474 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118883695 s


5000x5000x5000	0.118884 s	2102.895607 GFLOPS
File saved successfully
Number of cores = 21 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.189433254 s


5000x5000x5000	0.189433 s	1319.726050 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.206125470 s


5000x5000x5000	0.206125 s	1212.853511 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222900842 s


5000x5000x5000	0.222901 s	1121.574947 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102527551 s


5000x5000x5000	0.102528 s	2438.368980 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.101751201 s


5000x5000x5000	0.101751 s	2456.973456 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118252448 s


5000x5000x5000	0.118252 s	2114.121139 GFLOPS
File saved successfully
Number of cores = 21 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.188909167 s


5000x5000x5000	0.188909 s	1323.387340 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.206046247 s


5000x5000x5000	0.206046 s	1213.319843 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222124409 s


5000x5000x5000	0.222124 s	1125.495397 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.103400866 s


5000x5000x5000	0.103401 s	2417.774722 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102774175 s


5000x5000x5000	0.102774 s	2432.517702 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118282230 s


5000x5000x5000	0.118282 s	2113.588829 GFLOPS
File saved successfully
Number of cores = 21 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.189457397 s


5000x5000x5000	0.189457 s	1319.557874 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.207619716 s


5000x5000x5000	0.207620 s	1204.124564 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.222637354 s


5000x5000x5000	0.222637 s	1122.902314 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.103531037 s


5000x5000x5000	0.103531 s	2414.734820 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102869343 s


5000x5000x5000	0.102869 s	2430.267295 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118246212 s


5000x5000x5000	0.118246 s	2114.232632 GFLOPS
File saved successfully
Number of cores = 21 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.182003042 s


5000x5000x5000	0.182003 s	1373.603415 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.209080918 s


5000x5000x5000	0.209081 s	1195.709309 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225620342 s


5000x5000x5000	0.225620 s	1108.056117 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.98102934 s


5000x5000x5000	0.098103 s	2548.343763 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.101495132 s


5000x5000x5000	0.101495 s	2463.172322 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121668329 s


5000x5000x5000	0.121668 s	2054.766446 GFLOPS
File saved successfully
Number of cores = 22 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.182058950 s


5000x5000x5000	0.182059 s	1373.181599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.209521159 s


5000x5000x5000	0.209521 s	1193.196912 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225629356 s


5000x5000x5000	0.225629 s	1108.011849 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.98818217 s


5000x5000x5000	0.098818 s	2529.897903 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.101869000 s


5000x5000x5000	0.101869 s	2454.132268 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121823819 s


5000x5000x5000	0.121824 s	2052.143842 GFLOPS
File saved successfully
Number of cores = 22 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.181458524 s


5000x5000x5000	0.181459 s	1377.725303 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.208568562 s


5000x5000x5000	0.208569 s	1198.646611 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.229166186 s


5000x5000x5000	0.229166 s	1090.911379 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.97733509 s


5000x5000x5000	0.097734 s	2557.976303 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.100766778 s


5000x5000x5000	0.100767 s	2480.976419 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.120890171 s


5000x5000x5000	0.120890 s	2067.992773 GFLOPS
File saved successfully
Number of cores = 22 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.181878371 s


5000x5000x5000	0.181878 s	1374.544970 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.208778385 s


5000x5000x5000	0.208778 s	1197.441967 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225945902 s


5000x5000x5000	0.225946 s	1106.459545 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.97872436 s


5000x5000x5000	0.097872 s	2554.345332 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102070468 s


5000x5000x5000	0.102070 s	2449.288270 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121628724 s


5000x5000x5000	0.121629 s	2055.435524 GFLOPS
File saved successfully
Number of cores = 22 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.181656997 s


5000x5000x5000	0.181657 s	1376.220042 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.209591093 s


5000x5000x5000	0.209591 s	1192.798780 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.224878114 s


5000x5000x5000	0.224878 s	1111.713344 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.97700673 s


5000x5000x5000	0.097701 s	2558.836007 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.102085285 s


5000x5000x5000	0.102085 s	2448.932772 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121908722 s


5000x5000x5000	0.121909 s	2050.714632 GFLOPS
File saved successfully
Number of cores = 22 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.174649569 s


5000x5000x5000	0.174650 s	1431.437830 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.200745814 s


5000x5000x5000	0.200746 s	1245.355980 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225281274 s


5000x5000x5000	0.225281 s	1109.723838 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.95501210 s


5000x5000x5000	0.095501 s	2617.767880 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.99356995 s


5000x5000x5000	0.099357 s	2516.179158 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122264927 s


5000x5000x5000	0.122265 s	2044.740108 GFLOPS
File saved successfully
Number of cores = 23 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.174707368 s


5000x5000x5000	0.174707 s	1430.964262 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.202049239 s


5000x5000x5000	0.202049 s	1237.322156 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.229634687 s


5000x5000x5000	0.229635 s	1088.685700 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.95403066 s


5000x5000x5000	0.095403 s	2620.460856 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.99682752 s


5000x5000x5000	0.099683 s	2507.956442 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.122365092 s


5000x5000x5000	0.122365 s	2043.066335 GFLOPS
File saved successfully
Number of cores = 23 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.174966687 s


5000x5000x5000	0.174967 s	1428.843423 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201627249 s


5000x5000x5000	0.201627 s	1239.911774 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.224483742 s


5000x5000x5000	0.224484 s	1113.666396 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.95757812 s


5000x5000x5000	0.095758 s	2610.753053 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.100239105 s


5000x5000x5000	0.100239 s	2494.036634 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121374252 s


5000x5000x5000	0.121374 s	2059.744928 GFLOPS
File saved successfully
Number of cores = 23 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.174515657 s


5000x5000x5000	0.174516 s	1432.536222 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.201074021 s


5000x5000x5000	0.201074 s	1243.323224 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225716614 s


5000x5000x5000	0.225717 s	1107.583512 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.96270912 s


5000x5000x5000	0.096271 s	2596.838389 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.99615760 s


5000x5000x5000	0.099616 s	2509.643052 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121651695 s


5000x5000x5000	0.121652 s	2055.047404 GFLOPS
File saved successfully
Number of cores = 23 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.174976894 s


5000x5000x5000	0.174977 s	1428.760074 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.202424304 s


5000x5000x5000	0.202424 s	1235.029564 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225442705 s


5000x5000x5000	0.225443 s	1108.929207 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.96111028 s


5000x5000x5000	0.096111 s	2601.158319 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.99464519 s


5000x5000x5000	0.099465 s	2513.459096 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.121603446 s


5000x5000x5000	0.121603 s	2055.862792 GFLOPS
File saved successfully
Number of cores = 23 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.168607244 s


5000x5000x5000	0.168607 s	1482.735819 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.205108440 s


5000x5000x5000	0.205108 s	1218.867444 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.226553807 s


5000x5000x5000	0.226554 s	1103.490616 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.91869027 s


5000x5000x5000	0.091869 s	2721.265351 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.96891838 s


5000x5000x5000	0.096892 s	2580.196693 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.119654266 s


5000x5000x5000	0.119654 s	2089.353003 GFLOPS
File saved successfully
Number of cores = 24 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.168593649 s


5000x5000x5000	0.168594 s	1482.855383 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.204988304 s


5000x5000x5000	0.204988 s	1219.581777 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225329126 s


5000x5000x5000	0.225329 s	1109.488172 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.91519684 s


5000x5000x5000	0.091520 s	2731.652788 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.97395569 s


5000x5000x5000	0.097396 s	2566.851886 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118630146 s


5000x5000x5000	0.118630 s	2107.390140 GFLOPS
File saved successfully
Number of cores = 24 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.168981164 s


5000x5000x5000	0.168981 s	1479.454834 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.204864151 s


5000x5000x5000	0.204864 s	1220.320875 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.226699400 s


5000x5000x5000	0.226699 s	1102.781922 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.91129791 s


5000x5000x5000	0.091130 s	2743.339991 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.98750548 s


5000x5000x5000	0.098751 s	2531.631521 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.119319465 s


5000x5000x5000	0.119319 s	2095.215563 GFLOPS
File saved successfully
Number of cores = 24 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.168653662 s


5000x5000x5000	0.168654 s	1482.327730 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.204809377 s


5000x5000x5000	0.204809 s	1220.647236 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.225835847 s


5000x5000x5000	0.225836 s	1106.998749 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.91265037 s


5000x5000x5000	0.091265 s	2739.274625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.98226268 s


5000x5000x5000	0.098226 s	2545.144034 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.119164738 s


5000x5000x5000	0.119165 s	2097.936052 GFLOPS
File saved successfully
Number of cores = 24 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.168900095 s


5000x5000x5000	0.168900 s	1480.164946 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.204478753 s


5000x5000x5000	0.204479 s	1222.620915 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.226181735 s


5000x5000x5000	0.226182 s	1105.305873 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.91423350 s


5000x5000x5000	0.091423 s	2734.531167 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.99748407 s


5000x5000x5000	0.099748 s	2506.305690 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(5000x5000) and matrix B(5000x5000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.118718845 s


5000x5000x5000	0.118719 s	2105.815635 GFLOPS
File saved successfully
Number of cores = 24 iteration=5
iterations ended
files run
make: *** No rule to make target 'clean'.  Stop.
Removing mkl version 2022.2.1
Use `module list` to view any remaining dependent modules.
Removing compiler-rt version 2022.2.1
Use `module list` to view any remaining dependent modules.
Removing tbb version 2021.7.1
Use `module list` to view any remaining dependent modules.
delete blis
program terminated
