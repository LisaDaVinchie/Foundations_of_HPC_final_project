Memory allocated

Loading modules
Lmod Warning: The architecture selection module has been deprecated. The
module system will now autonomously handle the proper selection of binaries. 
While processing the following module(s):
    Module fullname   Module Filename
    ---------------   ---------------
    architecture/AMD  /orfeo/opt/modules/profiles/architecture/AMD.lua

Loading mkl version 2022.2.1
Loading tbb version 2021.7.1
Loading compiler-rt version 2022.2.1
modules loaded
configure: detected Linux kernel version 6.1.13-100.fc36.x86_64.
configure: python interpreter search list is: python python3 python2.
configure: found 'python3'.
configure: using 'python3' as python interpreter.
configure: found python version 3.10.11 (maj: 3, min: 10, rev: 11).
configure: python 3.10.11 appears to be supported.
configure: C compiler search list is: gcc clang cc.
configure: found 'gcc'.
configure: using 'gcc' as C compiler.
configure: found gcc version 12.2.1 (maj: 12, min: 2, rev: 1).
configure: checking for blacklisted configurations due to gcc 12.2.1.
configure: checking gcc 12.2.1 against known consequential version ranges.
configure: found assembler ('as') version 2.37 (maj: 2, min: 37, rev: ).
configure: checking for blacklisted configurations due to as 2.37.
configure: C++ compiler search list is: g++ clang++ c++.
configure: found 'g++'.
configure: using 'g++' as C++ compiler.
configure: Fortran compiler search list is: gfortran ifort.
configure: found 'gfortran'.
configure: using 'gfortran' as Fortran compiler.
configure: library archiver search list is: ar.
configure: found 'ar'.
configure: using 'ar' as library archiver.
configure: archive indexer search list is: ranlib.
configure: found 'ranlib'.
configure: using 'ranlib' as archive indexer.
configure: reading configuration registry...done.
configure: determining default version string.
configure: found '.git' directory; assuming git clone.
configure: executing: git describe --tags.
configure: got back 0.9.0-118-g634e532c.
configure: truncating to 0.9.0-118.
configure: starting configuration of BLIS 0.9.0-118.
configure: configuring with official version string.
configure: found shared library .so version '4.0.0'.
configure:   .so major version: 4
configure:   .so minor.build version: 0.0
configure: automatic configuration requested.
configure: hardware detection driver returned 'zen2'.
configure: checking configuration against contents of 'config_registry'.
configure: configuration 'zen2' is registered.
configure: 'zen2' is defined as having the following sub-configurations:
configure:    zen2
configure: which collectively require the following kernels:
configure:    zen2 zen haswell
configure: checking sub-configurations:
configure:   'zen2' is registered...and exists.
configure: checking sub-configurations' requisite kernels:
configure:   'zen2' kernels...exist.
configure:   'zen' kernels...exist.
configure:   'haswell' kernels...exist.
configure: detected --prefix='/u/dssc/ldavin00/myblis'.
configure: no install exec_prefix option given; defaulting to PREFIX.
configure: no install libdir option given; defaulting to EXECPREFIX/lib.
configure: no install includedir option given; defaulting to PREFIX/include.
configure: no install sharedir option given; defaulting to PREFIX/share.
configure: final installation directories:
configure:   prefix:      /u/dssc/ldavin00/myblis
configure:   exec_prefix: /u/dssc/ldavin00/myblis
configure:   libdir:      /u/dssc/ldavin00/myblis/lib
configure:   includedir:  /u/dssc/ldavin00/myblis/include
configure:   sharedir:    /u/dssc/ldavin00/myblis/share
configure: NOTE: the variables above can be overridden when running make.
configure: no preset CFLAGS detected.
configure: no preset LDFLAGS detected.
configure: disabling verbose make output. (enable with 'make V=1'.)
configure: disabling ARG_MAX hack.
configure: debug symbols disabled.
configure: AddressSanitizer support disabled.
configure: building BLIS as both static and shared libraries.
configure: exporting only public symbols within shared library.
configure: enabling operating system support.
configure: enabling thread-local storage (TLS) support.
configure: enabling support for threading via OpenMP.
configure: enabling support for single-threading.
configure: threading will default to OpenMP.
configure: requesting slab work partitioning in jr and/or ir loops.
configure: internal memory pools for packing blocks are enabled.
configure: internal memory pools for small blocks are enabled.
configure: memory tracing output is disabled.
configure: libmemkind not found; disabling.
configure: compiler appears to support #pragma omp simd.
configure: the BLAS compatibility layer is enabled.
configure: the CBLAS compatibility layer is enabled.
configure: mixed datatype support is enabled.
configure: mixed datatype optimizations requiring extra memory are enabled.
configure: sup (skinny/unpacked) matrix handling is enabled.
configure: trsm diagonal element pre-inversion is enabled.
configure: the BLIS API integer size is automatically determined.
configure: the BLAS/CBLAS API integer size is 32-bit.
configure: AMD-specific framework files will not be considered.
configure: configuring with no addons.
configure: configuring for conventional gemm implementation.
configure: configuring complex return type as "gnu".
configure: creating ./config.mk from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/config.mk.in
configure: creating ./bli_config.h from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/bli_config.h.in
configure: creating ./bli_addon.h from /orfeo/cephfs/home/dssc/ldavin00/blis/./build/bli_addon.h.in
configure: creating ./obj/zen2
configure: creating ./obj/zen2/config/zen2
configure: creating ./obj/zen2/kernels/zen2
configure: creating ./obj/zen2/kernels/zen
configure: creating ./obj/zen2/kernels/haswell
configure: creating ./obj/zen2/ref_kernels/zen2
configure: creating ./obj/zen2/frame
configure: creating ./obj/zen2/blastest
configure: creating ./obj/zen2/testsuite
configure: creating ./lib/zen2
configure: creating ./include/zen2
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./config/zen2 to ./obj/zen2/config/zen2
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/zen2 to ./obj/zen2/kernels/zen2
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/zen to ./obj/zen2/kernels/zen
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./kernels/haswell to ./obj/zen2/kernels/haswell
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels to ./obj/zen2/ref_kernels
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels to ./obj/zen2/ref_kernels/zen2
configure: mirroring /orfeo/cephfs/home/dssc/ldavin00/blis/./frame to ./obj/zen2/frame
configure: creating makefile fragments in ./obj/zen2/config/zen2
configure: creating makefile fragments in ./obj/zen2/kernels/zen2
configure: creating makefile fragments in ./obj/zen2/kernels/zen
configure: creating makefile fragments in ./obj/zen2/kernels/haswell
configure: creating makefile fragments in ./obj/zen2/ref_kernels
configure: creating makefile fragments in ./obj/zen2/frame
configure: configured to build within top-level directory of source distribution.
Generating monolithic blis.h.............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Generated include/zen2/blis.h
Compiling obj/zen2/config/zen2/bli_cntx_init_zen2.o ('zen2' CFLAGS for config code)
Compiling obj/zen2/kernels/zen/1/bli_amaxv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_axpyv_zen_int10.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_axpyv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_copyv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_dotv_zen_int10.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_dotv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_dotxv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_scalv_zen_int10.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_scalv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_setv_zen_int.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1/bli_swapv_zen_int8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1f/bli_axpyf_zen_int_5.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1f/bli_axpyf_zen_int_4.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1f/bli_axpyf_zen_int_8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/1f/bli_dotxf_zen_int_8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/3/bli_gemm_small.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/3/bli_gemmt_small.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/zen/3/bli_trsm_small.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_c3xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_c8xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_d6xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_d8xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_s16xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_s6xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_z3xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/1m/bli_packm_haswell_asm_z4xk.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/bli_gemm_haswell_asm_d6x8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/bli_gemm_haswell_asm_d8x6.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/bli_gemmtrsm_l_haswell_asm_d6x8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/bli_gemmtrsm_u_haswell_asm_d6x8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_d6x8m.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_d6x8n.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_s6x16m.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_d6x8m.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_d6x8n.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rd_haswell_asm_s6x16n.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_s6x16m.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/bli_gemmsup_rv_haswell_asm_s6x16n.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx1.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx2.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx4.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rd_haswell_asm_dMx8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_r_haswell_ref_dMx1.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx2.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx4.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx6.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/d6x8/bli_gemmsup_rv_haswell_asm_dMx8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx12.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx16.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx1.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx2.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx4.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rd_haswell_asm_sMx8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_r_haswell_ref_sMx1.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx12.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx16.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx2.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx4.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx6.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/kernels/haswell/3/sup/s6x16/bli_gemmsup_rv_haswell_asm_sMx8.o ('zen2' CFLAGS for kernels)
Compiling obj/zen2/ref_kernels/zen2/bli_cntx_zen2_ref.o ('zen2' CFLAGS for ref. kernel init)
Compiling obj/zen2/ref_kernels/zen2/1/bli_addv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_amaxv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_axpbyv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_axpyv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_copyv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_dotv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_dotxv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_invertv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_invscalv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_scal2v_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_scalv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_setv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_subv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_swapv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1/bli_xpbyv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1f/bli_axpy2v_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1f/bli_axpyf_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1f/bli_dotaxpyv_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1f/bli_dotxaxpyf_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1f/bli_dotxf_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1m/bli_packm_cxc_diag_1er_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1m/bli_packm_cxc_diag_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1m/bli_packm_cxk_1er_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1m/bli_packm_cxk_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/1m/bli_unpackm_cxk_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/3/bli_gemm_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/3/bli_gemmsup_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/3/bli_gemmtrsm_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/3/bli_trsm_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/ind/bli_gemm1m_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/ind/bli_gemmtrsm1m_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/ref_kernels/zen2/ind/bli_trsm1m_zen2_ref.o ('zen2' CFLAGS for ref. kernels)
Compiling obj/zen2/frame/0/bli_l0_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/0/bli_l0_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/0/bli_l0_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/0/bli_l0_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/0/copysc/bli_copysc.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1/bli_l1v_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1d/bli_l1d_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1f/bli_l1f_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/bli_l1m_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_alloc.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_blk_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_init.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_int.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_part.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_scalar.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_struc_cxk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/packm/bli_packm_struc_cxk_md.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/unpackm/bli_unpackm_blk_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/unpackm/bli_unpackm_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/unpackm/bli_unpackm_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/1m/unpackm/bli_unpackm_int.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/bli_l2_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/gemv/bli_gemv_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/gemv/bli_gemv_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/gemv/bli_gemv_unf_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/gemv/bli_gemv_unf_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/gemv/bli_gemv_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/ger/bli_ger_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/ger/bli_ger_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/ger/bli_ger_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unb_var3.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unb_var4.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unf_var1a.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unf_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unf_var3a.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/hemv/bli_hemv_unf_var3.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her/bli_her_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her/bli_her_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her/bli_her_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unb_var3.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unb_var4.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unf_var4.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_unf_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/her2/bli_her2_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trmv/bli_trmv_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trmv/bli_trmv_unf_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trmv/bli_trmv_unf_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trmv/bli_trmv_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trmv/bli_trmv_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trsv/bli_trsv_unb_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trsv/bli_trsv_unb_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trsv/bli_trsv_unf_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trsv/bli_trsv_unf_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_blocksize.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/2/trsv/bli_trsv_var_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_decor.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_ind.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_direct.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_int.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_packab.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_prune.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_schema.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_decor.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_int.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_packm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_packm_var.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_ref.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_var12.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_sup_var1n2m.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_thrinfo.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_ukr_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_ukr_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/bli_l3_ukr_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_blk_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_blk_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_blk_var3.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_md.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemm/bli_gemm_md_c2r_ref.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_l_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_l_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_u_ker_var2b.o ('zen2' CFLAGS for framework code)
In file included from /orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels/3/bli_gemm_ref.c:35:
/orfeo/cephfs/home/dssc/ldavin00/blis/./frame/include//bli_complex_macro_defs.h: In function ‘bli_cgemm_zen2_ref’:
/orfeo/cephfs/home/dssc/ldavin00/blis/./frame/include//bli_complex_macro_defs.h:52:30: warning: ‘ab[<unknown>].real’ may be used uninitialized [-Wmaybe-uninitialized]
   52 | #define bli_cimag( x )  ( (x).imag )
      |                              ^
/orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels/3/bli_gemm_ref.c:197:21: note: ‘ab’ declared here
  197 |               ctype ab[ BLIS_STACK_BUF_MAX_SIZE \
      |                     ^~
/orfeo/cephfs/home/dssc/ldavin00/blis/./frame/include//bli_gentfunc_macro_defs.h:153:1: note: in expansion of macro ‘GENTFUNC’
  153 | GENTFUNC( dcomplex, z, __VA_ARGS__ )
      | ^~~~~~~~
/orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels/3/bli_gemm_ref.c:300:1: note: in expansion of macro ‘INSERT_GENTFUNC_BASIC’
  300 | INSERT_GENTFUNC_BASIC( gemm, BLIS_CNAME_INFIX, BLIS_REF_SUFFIX )
      | ^~~~~~~~~~~~~~~~~~~~~
/orfeo/cephfs/home/dssc/ldavin00/blis/./frame/include//bli_complex_macro_defs.h:53:30: warning: ‘ab[<unknown>].imag’ may be used uninitialized [-Wmaybe-uninitialized]
   53 | #define bli_zreal( x )  ( (x).real )
      |                              ^
/orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels/3/bli_gemm_ref.c:197:21: note: ‘ab’ declared here
  197 |               ctype ab[ BLIS_STACK_BUF_MAX_SIZE \
      |                     ^~
/orfeo/cephfs/home/dssc/ldavin00/blis/./frame/include//bli_gentfunc_macro_defs.h:153:1: note: in expansion of macro ‘GENTFUNC’
  153 | GENTFUNC( dcomplex, z, __VA_ARGS__ )
      | ^~~~~~~~
/orfeo/cephfs/home/dssc/ldavin00/blis/./ref_kernels/3/bli_gemm_ref.c:300:1: note: in expansion of macro ‘INSERT_GENTFUNC_BASIC’
  300 | INSERT_GENTFUNC_BASIC( gemm, BLIS_CNAME_INFIX, BLIS_REF_SUFFIX )
      | ^~~~~~~~~~~~~~~~~~~~~
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_u_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_x_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/gemmt/bli_gemmt_x_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/hemm/bli_hemm_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/symm/bli_symm_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_ll_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_ll_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_lu_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_lu_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_rl_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_rl_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_ru_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_ru_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_xx_ker_var2b.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm/bli_trmm_xx_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trmm3/bli_trmm3_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_blk_var1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_blk_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_blk_var3.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_ll_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_lu_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_rl_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_ru_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_front.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/3/trsm/bli_trsm_xx_ker_var2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_apool.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_arch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_array.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_blksz.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_clock.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_cntl.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_cntx.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_const.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_cpuid.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_error.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_env.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_func.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_getopt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_gks.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_ind.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_info.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_init.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_machval.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_malloc.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_mbool.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_memsys.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_obj.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_obj_scalar.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_pack.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_param_map.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_part.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_pba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_pool.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_prune.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_query.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_rntm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_sba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_setgetijm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_setri.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_setgetijv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_string.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/bli_winsys.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/cast/bli_castm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/cast/bli_castnzm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/cast/bli_castv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/check/bli_obj_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/check/bli_part_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/noopt/bli_lsame.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/noopt/bli_dlamch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/noopt/bli_slamch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/proj/bli_projm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/base/proj/bli_projv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_amax.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_asum.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_axpy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_copy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_dot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_gemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_gemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_ger.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_hemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_hemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_her2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_her.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_her2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_herk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_nrm2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_scal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_swap.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_symm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_symv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_syr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_syr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_syr2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_syrk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_trmm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_trmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_trsm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/bla_trsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/blis/thread/b77_thread.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/f77_sub/f77_amax_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/f77_sub/f77_asum_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/f77_sub/f77_dot_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/f77_sub/f77_nrm2_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_caxpy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ccopy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cdotc_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cgbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cgemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cgemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cgeru.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cgerc.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cdotu_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cher2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cher2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cherk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cher.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chpr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_chpr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_csscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cswap.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_cscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_csymm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_csyr2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_csyrk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctbsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctpsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctrmm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctrmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctrsm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ctrsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dasum.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_daxpy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dcopy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ddot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dgbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dgemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dgemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dger.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dnrm2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_drot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_drotg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_drotm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_drotmg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsdot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dspmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dspr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dspr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dswap.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsymm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsymv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsyr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsyr2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsyr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dsyrk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtbsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtpsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtrmm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtrmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtrsm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dtrsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dzasum.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_dznrm2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_globals.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_icamax.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_idamax.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_isamax.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_izamax.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sasum.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_saxpy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_scasum.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_scnrm2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_scopy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sdot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sdsdot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sgbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sgemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sgemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sger.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_snrm2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_srot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_srotg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_srotm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_srotmg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sspmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sspr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sspr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_sswap.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssymm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssymv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssyr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssyr2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssyrk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ssyr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_stbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_stbsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_stpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_stpsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_strmm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_strmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_strsm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_strsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_xerbla.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zaxpy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zcopy.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zdotc_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zdotu_sub.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zdscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zgbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zgemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zgemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zgerc.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zgeru.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhemm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhemv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zher2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zher.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zher2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zherk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhpr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zhpr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zscal.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zsymm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zsyr2k.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zsyrk.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_zswap.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztbsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztpsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztrmm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztrmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztrsm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/cblas_ztrsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_caxpby.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_cgemm_batch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_cgemm3m.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_cgemmt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_daxpby.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_dgemm_batch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_dgemmt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_saxpby.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_zaxpby.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_zgemm3m.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_sgemmt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_sgemm_batch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_zgemm_batch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/cblas/src/extra/cblas_zgemmt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/extra/bla_axpby.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/extra/bla_gemm3m.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/extra/bla_gemm_batch.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/extra/bla_gemmt.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_cabs1.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_gbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_hpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_hbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_hpr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_hpr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_lsame.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_rot.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_rotg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_rotm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_rotmg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_sbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_spmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_spr2.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_spr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_tbmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_tbsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_tpmv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_tpsv.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_xerbla_array.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/bla_xerbla.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_c_abs.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_c_div.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_d_cnjg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_d_imag.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_d_abs.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_d_sign.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_f__cabs.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_r_abs.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_r_cnjg.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_r_imag.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_r_sign.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_z_abs.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/compat/f2c/util/bla_z_div.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_pthread.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thrcomm.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thrcomm_openmp.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thrcomm_pthreads.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thrcomm_single.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_openmp.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_pthreads.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_range.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_range_slab_rr.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_range_tlb.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thread_single.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/thread/bli_thrinfo.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_check.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_fpa.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_oapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_oapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_oapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_tapi_ba.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_tapi.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_tapi_ex.o ('zen2' CFLAGS for framework code)
Compiling obj/zen2/frame/util/bli_util_unb_var1.o ('zen2' CFLAGS for framework code)
Archiving lib/zen2/libblis.a
Dynamically linking lib/zen2/libblis.so
Creating symlink lib/zen2/libblis.so.4
Installing libblis.a into /u/dssc/ldavin00/myblis/lib/
Installing libblis.so.4.0.0 into /u/dssc/ldavin00/myblis/lib/
Generating monolithic cblas.h........
Generated include/zen2/cblas.h
Installing blis.h cblas.h into /u/dssc/ldavin00/myblis/include/blis/
Installing config.mk common.mk into /u/dssc/ldavin00/myblis/share/blis/
Installing config/zen2/make_defs.mk into /u/dssc/ldavin00/myblis/share/blis/config/zen2
blis installed
returning to /u/dssc/ldavin00/Foundations_of_HPC_final_project/exercise2/fixed_matrix
returned to previous path
setting number of cores and their topology
setted number of cores and their topology

exporting settings
settings exported

path to results is ./EPYC/spread_cores

compile files, specifying in which folder the results will be stored
make: Nothing to be done for 'double'.
make: Nothing to be done for 'float'.
files compiled
move to the result path
moved to ./EPYC/spread_cores
run files
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 43.177870176 s


10000x10000x10000	43.177870 s	46.320024 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.140126893 s


10000x10000x10000	42.140127 s	47.460702 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.359270902 s


10000x10000x10000	41.359271 s	48.356752 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 30.966214154 s


10000x10000x10000	30.966214 s	64.586520 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.494623505 s


10000x10000x10000	20.494624 s	97.586569 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.533013815 s


10000x10000x10000	20.533014 s	97.404113 GFLOPS
File saved successfully
Number of cores = 1 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.958592319 s


10000x10000x10000	42.958592 s	46.556460 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.9888407 s


10000x10000x10000	42.009888 s	47.607839 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.667136750 s


10000x10000x10000	41.667137 s	47.999458 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 31.103016812 s


10000x10000x10000	31.103017 s	64.302444 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.495278804 s


10000x10000x10000	20.495279 s	97.583449 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.500913947 s


10000x10000x10000	20.500914 s	97.556626 GFLOPS
File saved successfully
Number of cores = 1 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.908237834 s


10000x10000x10000	42.908238 s	46.611096 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.987583513 s


10000x10000x10000	41.987584 s	47.633129 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.667652396 s


10000x10000x10000	41.667652 s	47.998864 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 31.41488117 s


10000x10000x10000	31.041488 s	64.429901 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.486954037 s


10000x10000x10000	20.486954 s	97.623102 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.665783623 s


10000x10000x10000	20.665784 s	96.778329 GFLOPS
File saved successfully
Number of cores = 1 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.956637281 s


10000x10000x10000	42.956637 s	46.558579 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.22096396 s


10000x10000x10000	42.022096 s	47.594008 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.535103348 s


10000x10000x10000	41.535103 s	48.152041 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 31.85061214 s


10000x10000x10000	31.085061 s	64.339587 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.607197309 s


10000x10000x10000	20.607197 s	97.053470 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.499391138 s


10000x10000x10000	20.499391 s	97.563873 GFLOPS
File saved successfully
Number of cores = 1 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.947908595 s


10000x10000x10000	42.947909 s	46.568042 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 42.108038422 s


10000x10000x10000	42.108038 s	47.496869 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 41.548713676 s


10000x10000x10000	41.548714 s	48.136268 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 30.938942358 s


10000x10000x10000	30.938942 s	64.643451 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.902573135 s


10000x10000x10000	20.902573 s	95.682000 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 20.539416417 s


10000x10000x10000	20.539416 s	97.373750 GFLOPS
File saved successfully
Number of cores = 1 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.726963359 s


10000x10000x10000	22.726963 s	88.001198 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.504642019 s


10000x10000x10000	22.504642 s	88.870554 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.129775161 s


10000x10000x10000	23.129775 s	86.468631 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.369500074 s


10000x10000x10000	16.369500 s	122.178441 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.244130272 s


10000x10000x10000	11.244130 s	177.870582 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.55036556 s


10000x10000x10000	11.055037 s	180.913016 GFLOPS
File saved successfully
Number of cores = 2 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.113899151 s


10000x10000x10000	23.113899 s	86.528023 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.605431307 s


10000x10000x10000	22.605431 s	88.474313 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.141726606 s


10000x10000x10000	23.141727 s	86.423975 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.687730892 s


10000x10000x10000	16.687731 s	119.848529 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.232315130 s


10000x10000x10000	11.232315 s	178.057682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.92012020 s


10000x10000x10000	11.092012 s	180.309938 GFLOPS
File saved successfully
Number of cores = 2 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.348641892 s


10000x10000x10000	23.348642 s	85.658087 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.431140000 s


10000x10000x10000	22.431140 s	89.161764 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.818536168 s


10000x10000x10000	22.818536 s	87.648041 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.344110399 s


10000x10000x10000	16.344110 s	122.368239 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.197969126 s


10000x10000x10000	11.197969 s	178.603814 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.83872945 s


10000x10000x10000	11.083873 s	180.442343 GFLOPS
File saved successfully
Number of cores = 2 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.341965895 s


10000x10000x10000	23.341966 s	85.682586 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.586958929 s


10000x10000x10000	22.586959 s	88.546670 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.57788635 s


10000x10000x10000	23.057789 s	86.738587 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.665443059 s


10000x10000x10000	16.665443 s	120.008811 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.83244186 s


10000x10000x10000	11.083244 s	180.452579 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.71119014 s


10000x10000x10000	11.071119 s	180.650212 GFLOPS
File saved successfully
Number of cores = 2 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 23.117352014 s


10000x10000x10000	23.117352 s	86.515099 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.517877130 s


10000x10000x10000	22.517877 s	88.818319 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 22.548013410 s


10000x10000x10000	22.548013 s	88.699610 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.588878879 s


10000x10000x10000	16.588879 s	120.562698 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.307129221 s


10000x10000x10000	11.307129 s	176.879556 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.51723236 s


10000x10000x10000	11.051723 s	180.967253 GFLOPS
File saved successfully
Number of cores = 2 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.328761951 s


10000x10000x10000	15.328762 s	130.473681 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.157656353 s


10000x10000x10000	15.157656 s	131.946520 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.426620565 s


10000x10000x10000	15.426621 s	129.646023 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.545457755 s


10000x10000x10000	16.545458 s	120.879097 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.445041679 s


10000x10000x10000	7.445042 s	268.635165 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.549994835 s


10000x10000x10000	7.549995 s	264.900843 GFLOPS
File saved successfully
Number of cores = 3 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.287091205 s


10000x10000x10000	15.287091 s	130.829337 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.56072496 s


10000x10000x10000	15.056072 s	132.836767 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.613324052 s


10000x10000x10000	15.613324 s	128.095721 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.479964777 s


10000x10000x10000	16.479965 s	121.359483 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.510990912 s


10000x10000x10000	7.510991 s	266.276451 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.536790439 s


10000x10000x10000	7.536790 s	265.364948 GFLOPS
File saved successfully
Number of cores = 3 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.274777661 s


10000x10000x10000	15.274778 s	130.934803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.221030376 s


10000x10000x10000	15.221030 s	131.397149 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.370877271 s


10000x10000x10000	15.370877 s	130.116191 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.208727747 s


10000x10000x10000	16.208728 s	123.390314 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.396168158 s


10000x10000x10000	7.396168 s	270.410293 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.562069024 s


10000x10000x10000	7.562069 s	264.477882 GFLOPS
File saved successfully
Number of cores = 3 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.178939295 s


10000x10000x10000	15.178939 s	131.761513 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.259449548 s


10000x10000x10000	15.259450 s	131.066327 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.468321284 s


10000x10000x10000	15.468321 s	129.296513 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.436056721 s


10000x10000x10000	16.436057 s	121.683688 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.458892738 s


10000x10000x10000	7.458893 s	268.136313 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.533944654 s


10000x10000x10000	7.533945 s	265.465183 GFLOPS
File saved successfully
Number of cores = 3 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.322753261 s


10000x10000x10000	15.322753 s	130.524845 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.170334835 s


10000x10000x10000	15.170335 s	131.836246 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 15.313372570 s


10000x10000x10000	15.313373 s	130.604802 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 16.519148270 s


10000x10000x10000	16.519148 s	121.071617 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.532234667 s


10000x10000x10000	7.532235 s	265.525450 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.577010633 s


10000x10000x10000	7.577011 s	263.956341 GFLOPS
File saved successfully
Number of cores = 3 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.839720882 s


10000x10000x10000	11.839721 s	168.922901 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.122835041 s


10000x10000x10000	11.122835 s	179.810273 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.243231616 s


10000x10000x10000	11.243232 s	177.884799 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.274525620 s


10000x10000x10000	11.274526 s	177.391056 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.559192073 s


10000x10000x10000	5.559192 s	359.764508 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.564314718 s


10000x10000x10000	5.564315 s	359.433300 GFLOPS
File saved successfully
Number of cores = 4 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.745153867 s


10000x10000x10000	11.745154 s	170.282997 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.344031836 s


10000x10000x10000	11.344032 s	176.304160 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.249045203 s


10000x10000x10000	11.249045 s	177.792867 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.389600193 s


10000x10000x10000	11.389600 s	175.598789 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.494717311 s


10000x10000x10000	5.494717 s	363.985968 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.555317265 s


10000x10000x10000	5.555317 s	360.015442 GFLOPS
File saved successfully
Number of cores = 4 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.713342994 s


10000x10000x10000	11.713343 s	170.745448 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.213852235 s


10000x10000x10000	11.213852 s	178.350843 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.453295821 s


10000x10000x10000	11.453296 s	174.622225 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.351977083 s


10000x10000x10000	11.351977 s	176.180764 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.538923784 s


10000x10000x10000	5.538924 s	361.080975 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.555894024 s


10000x10000x10000	5.555894 s	359.978069 GFLOPS
File saved successfully
Number of cores = 4 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.744736222 s


10000x10000x10000	11.744736 s	170.289052 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.127138060 s


10000x10000x10000	11.127138 s	179.740737 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.211570037 s


10000x10000x10000	11.211570 s	178.387148 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.396152561 s


10000x10000x10000	11.396153 s	175.497826 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.586650602 s


10000x10000x10000	5.586651 s	357.996256 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.516921574 s


10000x10000x10000	5.516922 s	362.521013 GFLOPS
File saved successfully
Number of cores = 4 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.703900904 s


10000x10000x10000	11.703901 s	170.883197 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.175267587 s


10000x10000x10000	11.175268 s	178.966632 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.252456719 s


10000x10000x10000	11.252457 s	177.738964 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 11.586252161 s


10000x10000x10000	11.586252 s	172.618373 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.523491627 s


10000x10000x10000	5.523492 s	362.089804 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.576786442 s


10000x10000x10000	5.576786 s	358.629476 GFLOPS
File saved successfully
Number of cores = 4 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.981308194 s


10000x10000x10000	8.981308 s	222.684709 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.930655097 s


10000x10000x10000	8.930655 s	223.947737 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.752069055 s


10000x10000x10000	8.752069 s	228.517393 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.660626145 s


10000x10000x10000	8.660626 s	230.930185 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.412036971 s


10000x10000x10000	4.412037 s	453.305358 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.357592742 s


10000x10000x10000	4.357593 s	458.969004 GFLOPS
File saved successfully
Number of cores = 5 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.44376089 s


10000x10000x10000	9.044376 s	221.131892 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.69937751 s


10000x10000x10000	9.069938 s	220.508680 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.759500666 s


10000x10000x10000	8.759501 s	228.323517 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.810186669 s


10000x10000x10000	8.810187 s	227.009946 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.415249259 s


10000x10000x10000	4.415249 s	452.975559 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.368448620 s


10000x10000x10000	4.368449 s	457.828436 GFLOPS
File saved successfully
Number of cores = 5 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.13066694 s


10000x10000x10000	9.013067 s	221.900056 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.890139305 s


10000x10000x10000	8.890139 s	224.968353 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.751268168 s


10000x10000x10000	8.751268 s	228.538306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.868103856 s


10000x10000x10000	8.868104 s	225.527354 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.442915903 s


10000x10000x10000	4.442916 s	450.154818 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.373388865 s


10000x10000x10000	4.373389 s	457.311266 GFLOPS
File saved successfully
Number of cores = 5 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.972296625 s


10000x10000x10000	8.972297 s	222.908368 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 9.181226378 s


10000x10000x10000	9.181226 s	217.835823 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.763789098 s


10000x10000x10000	8.763789 s	228.211790 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.923857354 s


10000x10000x10000	8.923857 s	224.118329 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.489724158 s


10000x10000x10000	4.489724 s	445.461665 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.357671546 s


10000x10000x10000	4.357672 s	458.960704 GFLOPS
File saved successfully
Number of cores = 5 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.992664393 s


10000x10000x10000	8.992664 s	222.403496 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.882240525 s


10000x10000x10000	8.882241 s	225.168413 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.739728243 s


10000x10000x10000	8.739728 s	228.840067 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 8.682102146 s


10000x10000x10000	8.682102 s	230.358958 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.426840071 s


10000x10000x10000	4.426840 s	451.789531 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.375975776 s


10000x10000x10000	4.375976 s	457.040921 GFLOPS
File saved successfully
Number of cores = 5 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.588285626 s


10000x10000x10000	7.588286 s	263.564143 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.541605105 s


10000x10000x10000	7.541605 s	265.195535 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.611097374 s


10000x10000x10000	7.611097 s	262.774197 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.837458574 s


10000x10000x10000	5.837459 s	342.614851 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.788421892 s


10000x10000x10000	3.788422 s	527.924306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.723446177 s


10000x10000x10000	3.723446 s	537.136810 GFLOPS
File saved successfully
Number of cores = 6 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.621174111 s


10000x10000x10000	7.621174 s	262.426756 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.717457690 s


10000x10000x10000	7.717458 s	259.152700 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.603020365 s


10000x10000x10000	7.603020 s	263.053353 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.735348608 s


10000x10000x10000	5.735349 s	348.714636 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.767769492 s


10000x10000x10000	3.767769 s	530.818036 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.739547010 s


10000x10000x10000	3.739547 s	534.824136 GFLOPS
File saved successfully
Number of cores = 6 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.595675610 s


10000x10000x10000	7.595676 s	263.307716 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.646195482 s


10000x10000x10000	7.646195 s	261.567992 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.626787573 s


10000x10000x10000	7.626788 s	262.233605 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.792226391 s


10000x10000x10000	5.792226 s	345.290371 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.720434200 s


10000x10000x10000	3.720434 s	537.571663 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.748892620 s


10000x10000x10000	3.748893 s	533.490874 GFLOPS
File saved successfully
Number of cores = 6 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.604455327 s


10000x10000x10000	7.604455 s	263.003715 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.532502252 s


10000x10000x10000	7.532502 s	265.516018 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.609792238 s


10000x10000x10000	7.609792 s	262.819265 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.794511618 s


10000x10000x10000	5.794512 s	345.154196 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.774686821 s


10000x10000x10000	3.774687 s	529.845281 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.763051981 s


10000x10000x10000	3.763052 s	531.483490 GFLOPS
File saved successfully
Number of cores = 6 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.768003157 s


10000x10000x10000	7.768003 s	257.466425 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.533330380 s


10000x10000x10000	7.533330 s	265.486830 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 7.615692149 s


10000x10000x10000	7.615692 s	262.615657 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.825885442 s


10000x10000x10000	5.825885 s	343.295456 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.726319436 s


10000x10000x10000	3.726319 s	536.722639 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.742490568 s


10000x10000x10000	3.742491 s	534.403484 GFLOPS
File saved successfully
Number of cores = 6 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.453895282 s


10000x10000x10000	6.453895 s	309.890370 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.691500537 s


10000x10000x10000	6.691501 s	298.886623 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.320358588 s


10000x10000x10000	6.320359 s	316.437742 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.898479092 s


10000x10000x10000	5.898479 s	339.070457 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.314008761 s


10000x10000x10000	3.314009 s	603.498706 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.168154715 s


10000x10000x10000	3.168155 s	631.282302 GFLOPS
File saved successfully
Number of cores = 7 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.407831520 s


10000x10000x10000	6.407832 s	312.118069 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.470338060 s


10000x10000x10000	6.470338 s	309.102860 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.367511857 s


10000x10000x10000	6.367512 s	314.094429 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.986423783 s


10000x10000x10000	5.986424 s	334.089278 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.214746387 s


10000x10000x10000	3.214746 s	622.133058 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.175907736 s


10000x10000x10000	3.175908 s	629.741216 GFLOPS
File saved successfully
Number of cores = 7 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.404230513 s


10000x10000x10000	6.404231 s	312.293568 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.469379046 s


10000x10000x10000	6.469379 s	309.148681 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.341205050 s


10000x10000x10000	6.341205 s	315.397465 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.978706800 s


10000x10000x10000	5.978707 s	334.520502 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.289208942 s


10000x10000x10000	3.289209 s	608.048937 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.176565625 s


10000x10000x10000	3.176566 s	629.610792 GFLOPS
File saved successfully
Number of cores = 7 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.442176585 s


10000x10000x10000	6.442177 s	310.454079 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.484269237 s


10000x10000x10000	6.484269 s	308.438766 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.309927116 s


10000x10000x10000	6.309927 s	316.960872 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.941743704 s


10000x10000x10000	5.941744 s	336.601526 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.299135540 s


10000x10000x10000	3.299136 s	606.219410 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.166656775 s


10000x10000x10000	3.166657 s	631.580920 GFLOPS
File saved successfully
Number of cores = 7 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.517468588 s


10000x10000x10000	6.517469 s	306.867609 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.474557736 s


10000x10000x10000	6.474558 s	308.901408 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.314746059 s


10000x10000x10000	6.314746 s	316.718991 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.909772674 s


10000x10000x10000	5.909773 s	338.422493 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.319862648 s


10000x10000x10000	3.319863 s	602.434562 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.164044726 s


10000x10000x10000	3.164045 s	632.102316 GFLOPS
File saved successfully
Number of cores = 7 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.299292194 s


10000x10000x10000	6.299292 s	317.495988 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.615159085 s


10000x10000x10000	5.615159 s	356.178689 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.556398513 s


10000x10000x10000	5.556399 s	359.945385 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.408941260 s


10000x10000x10000	4.408941 s	453.623644 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.824536780 s


10000x10000x10000	2.824537 s	708.080707 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.771579889 s


10000x10000x10000	2.771580 s	721.610085 GFLOPS
File saved successfully
Number of cores = 8 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.880649985 s


10000x10000x10000	5.880650 s	340.098459 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.638978215 s


10000x10000x10000	5.638978 s	354.674185 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.577350917 s


10000x10000x10000	5.577351 s	358.593180 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.584951065 s


10000x10000x10000	4.584951 s	436.209672 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.791253751 s


10000x10000x10000	2.791254 s	716.523892 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.778369230 s


10000x10000x10000	2.778369 s	719.846728 GFLOPS
File saved successfully
Number of cores = 8 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.917245124 s


10000x10000x10000	5.917245 s	337.995124 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.623507132 s


10000x10000x10000	5.623507 s	355.649945 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.575821752 s


10000x10000x10000	5.575822 s	358.691524 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.698545668 s


10000x10000x10000	4.698546 s	425.663629 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.880442878 s


10000x10000x10000	2.880443 s	694.337671 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.781825543 s


10000x10000x10000	2.781826 s	718.952346 GFLOPS
File saved successfully
Number of cores = 8 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.990159256 s


10000x10000x10000	5.990159 s	333.880939 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.639723342 s


10000x10000x10000	5.639723 s	354.627325 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.566565829 s


10000x10000x10000	5.566566 s	359.287945 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.719604237 s


10000x10000x10000	4.719604 s	423.764345 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.825340492 s


10000x10000x10000	2.825340 s	707.879282 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.769406428 s


10000x10000x10000	2.769406 s	722.176413 GFLOPS
File saved successfully
Number of cores = 8 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 6.124600615 s


10000x10000x10000	6.124601 s	326.551905 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.626608024 s


10000x10000x10000	5.626608 s	355.453942 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.578140358 s


10000x10000x10000	5.578140 s	358.542430 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.758375073 s


10000x10000x10000	4.758375 s	420.311549 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.856987142 s


10000x10000x10000	2.856987 s	700.038152 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.770062250 s


10000x10000x10000	2.770062 s	722.005435 GFLOPS
File saved successfully
Number of cores = 8 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.152751533 s


10000x10000x10000	5.152752 s	388.142139 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.106581294 s


10000x10000x10000	5.106581 s	391.651456 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.45899346 s


10000x10000x10000	5.045899 s	396.361454 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.873916054 s


10000x10000x10000	4.873916 s	410.347650 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.538052903 s


10000x10000x10000	2.538053 s	788.005639 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.483848784 s


10000x10000x10000	2.483849 s	805.201997 GFLOPS
File saved successfully
Number of cores = 9 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.179025516 s


10000x10000x10000	5.179026 s	386.173035 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.149940699 s


10000x10000x10000	5.149941 s	388.353986 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.995404438 s


10000x10000x10000	4.995404 s	400.367983 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.799601344 s


10000x10000x10000	4.799601 s	416.701275 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.539541682 s


10000x10000x10000	2.539542 s	787.543679 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.471971102 s


10000x10000x10000	2.471971 s	809.070947 GFLOPS
File saved successfully
Number of cores = 9 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.156797205 s


10000x10000x10000	5.156797 s	387.837629 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.163457042 s


10000x10000x10000	5.163457 s	387.337395 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.276971987 s


10000x10000x10000	5.276972 s	379.005233 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.961657518 s


10000x10000x10000	4.961658 s	403.091103 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.555887645 s


10000x10000x10000	2.555888 s	782.507010 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.485676852 s


10000x10000x10000	2.485677 s	804.609818 GFLOPS
File saved successfully
Number of cores = 9 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.161082178 s


10000x10000x10000	5.161082 s	387.515628 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.148410609 s


10000x10000x10000	5.148411 s	388.469404 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.18766350 s


10000x10000x10000	5.018766 s	398.504306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.986664045 s


10000x10000x10000	4.986664 s	401.069730 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.558174684 s


10000x10000x10000	2.558175 s	781.807440 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.474124832 s


10000x10000x10000	2.474125 s	808.366649 GFLOPS
File saved successfully
Number of cores = 9 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.176574463 s


10000x10000x10000	5.176574 s	386.355883 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 5.141728294 s


10000x10000x10000	5.141728 s	388.974268 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.994695984 s


10000x10000x10000	4.994696 s	400.424772 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.912658795 s


10000x10000x10000	4.912659 s	407.111522 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.555917241 s


10000x10000x10000	2.555917 s	782.497949 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.478514174 s


10000x10000x10000	2.478514 s	806.935067 GFLOPS
File saved successfully
Number of cores = 9 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.816423661 s


10000x10000x10000	4.816424 s	415.245863 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.562495584 s


10000x10000x10000	4.562496 s	438.356589 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.660485104 s


10000x10000x10000	4.660485 s	429.139876 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.479236754 s


10000x10000x10000	4.479237 s	446.504641 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.256832467 s


10000x10000x10000	2.256832 s	886.197815 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.238003286 s


10000x10000x10000	2.238003 s	893.653737 GFLOPS
File saved successfully
Number of cores = 10 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.814370773 s


10000x10000x10000	4.814371 s	415.422927 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.561516082 s


10000x10000x10000	4.561516 s	438.450718 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.681478574 s


10000x10000x10000	4.681479 s	427.215455 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.414955172 s


10000x10000x10000	4.414955 s	453.005732 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.280844553 s


10000x10000x10000	2.280845 s	876.868175 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.238731634 s


10000x10000x10000	2.238732 s	893.362996 GFLOPS
File saved successfully
Number of cores = 10 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.825829924 s


10000x10000x10000	4.825830 s	414.436487 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.550878032 s


10000x10000x10000	4.550878 s	439.475632 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.677362474 s


10000x10000x10000	4.677362 s	427.591407 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.532927061 s


10000x10000x10000	4.532927 s	441.216012 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.277788335 s


10000x10000x10000	2.277788 s	878.044711 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.240313716 s


10000x10000x10000	2.240314 s	892.732114 GFLOPS
File saved successfully
Number of cores = 10 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.862489022 s


10000x10000x10000	4.862489 s	411.311983 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.542194210 s


10000x10000x10000	4.542194 s	440.315827 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.667776836 s


10000x10000x10000	4.667777 s	428.469498 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.434596639 s


10000x10000x10000	4.434597 s	450.999305 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.303263753 s


10000x10000x10000	2.303264 s	868.333033 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.243737657 s


10000x10000x10000	2.243738 s	891.369806 GFLOPS
File saved successfully
Number of cores = 10 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.815679015 s


10000x10000x10000	4.815679 s	415.310072 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.538002614 s


10000x10000x10000	4.538003 s	440.722532 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.667618018 s


10000x10000x10000	4.667618 s	428.484077 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.492530961 s


10000x10000x10000	4.492531 s	445.183354 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.263679082 s


10000x10000x10000	2.263679 s	883.517463 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.241296903 s


10000x10000x10000	2.241297 s	892.340500 GFLOPS
File saved successfully
Number of cores = 10 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.359553767 s


10000x10000x10000	4.359554 s	458.762549 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.271005505 s


10000x10000x10000	4.271006 s	468.273805 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.164287258 s


10000x10000x10000	4.164287 s	480.274264 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.156683239 s


10000x10000x10000	4.156683 s	481.152853 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.138310777 s


10000x10000x10000	2.138311 s	935.317738 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.167743960 s


10000x10000x10000	2.167744 s	922.618186 GFLOPS
File saved successfully
Number of cores = 11 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.372671224 s


10000x10000x10000	4.372671 s	457.386320 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.274470162 s


10000x10000x10000	4.274470 s	467.894248 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.165530181 s


10000x10000x10000	4.165530 s	480.130959 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.152452491 s


10000x10000x10000	4.152452 s	481.643078 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.148150914 s


10000x10000x10000	2.148151 s	931.033284 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.195597806 s


10000x10000x10000	2.195598 s	910.913645 GFLOPS
File saved successfully
Number of cores = 11 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.383051937 s


10000x10000x10000	4.383052 s	456.303057 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.321725242 s


10000x10000x10000	4.321725 s	462.778147 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.265043821 s


10000x10000x10000	4.265044 s	468.928359 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.212918224 s


10000x10000x10000	4.212918 s	474.730316 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.132043980 s


10000x10000x10000	2.132044 s	938.066953 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.187556882 s


10000x10000x10000	2.187557 s	914.261941 GFLOPS
File saved successfully
Number of cores = 11 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.384448284 s


10000x10000x10000	4.384448 s	456.157735 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.301511323 s


10000x10000x10000	4.301511 s	464.952862 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.234360138 s


10000x10000x10000	4.234360 s	472.326381 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.193931067 s


10000x10000x10000	4.193931 s	476.879560 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.145931804 s


10000x10000x10000	2.145932 s	931.996066 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.198574183 s


10000x10000x10000	2.198574 s	909.680472 GFLOPS
File saved successfully
Number of cores = 11 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.353225728 s


10000x10000x10000	4.353226 s	459.429427 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.326287512 s


10000x10000x10000	4.326288 s	462.290126 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.241185215 s


10000x10000x10000	4.241185 s	471.566295 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.51417378 s


10000x10000x10000	4.051417 s	493.654396 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.154204047 s


10000x10000x10000	2.154204 s	928.417158 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.174466810 s


10000x10000x10000	2.174467 s	919.765706 GFLOPS
File saved successfully
Number of cores = 11 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.229813551 s


10000x10000x10000	4.229814 s	472.834080 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.816259663 s


10000x10000x10000	3.816260 s	524.073354 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.844864141 s


10000x10000x10000	3.844864 s	520.174427 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.492683346 s


10000x10000x10000	3.492683 s	572.625630 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.927780837 s


10000x10000x10000	1.927781 s	1037.462331 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.844087326 s


10000x10000x10000	1.844087 s	1084.547338 GFLOPS
File saved successfully
Number of cores = 12 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.224106095 s


10000x10000x10000	4.224106 s	473.472956 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.837340028 s


10000x10000x10000	3.837340 s	521.194365 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.853456732 s


10000x10000x10000	3.853457 s	519.014521 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.515712031 s


10000x10000x10000	3.515712 s	568.874806 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.917282228 s


10000x10000x10000	1.917282 s	1043.143242 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.854891808 s


10000x10000x10000	1.854892 s	1078.230003 GFLOPS
File saved successfully
Number of cores = 12 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.226024954 s


10000x10000x10000	4.226025 s	473.257972 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.836392703 s


10000x10000x10000	3.836393 s	521.323064 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.837976030 s


10000x10000x10000	3.837976 s	521.107997 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.562862396 s


10000x10000x10000	3.562862 s	561.346406 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.934072445 s


10000x10000x10000	1.934072 s	1034.087428 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.915356789 s


10000x10000x10000	1.915357 s	1044.191877 GFLOPS
File saved successfully
Number of cores = 12 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.221666352 s


10000x10000x10000	4.221666 s	473.746581 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.845666035 s


10000x10000x10000	3.845666 s	520.065960 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.838261534 s


10000x10000x10000	3.838262 s	521.069235 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.514659791 s


10000x10000x10000	3.514660 s	569.045119 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.897274792 s


10000x10000x10000	1.897275 s	1054.143558 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.857808393 s


10000x10000x10000	1.857808 s	1076.537283 GFLOPS
File saved successfully
Number of cores = 12 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 4.254721226 s


10000x10000x10000	4.254721 s	470.066050 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.849028194 s


10000x10000x10000	3.849028 s	519.611678 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.832532186 s


10000x10000x10000	3.832532 s	521.848194 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.508385430 s


10000x10000x10000	3.508385 s	570.062794 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.931570688 s


10000x10000x10000	1.931571 s	1035.426771 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.844924122 s


10000x10000x10000	1.844924 s	1084.055423 GFLOPS
File saved successfully
Number of cores = 12 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.813279016 s


10000x10000x10000	3.813279 s	524.482995 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.564594784 s


10000x10000x10000	3.564595 s	561.073592 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.828815190 s


10000x10000x10000	3.828815 s	522.354802 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.541635948 s


10000x10000x10000	3.541636 s	564.710780 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.790785206 s


10000x10000x10000	1.790785 s	1116.828525 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.845631705 s


10000x10000x10000	1.845632 s	1083.639815 GFLOPS
File saved successfully
Number of cores = 13 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.796316023 s


10000x10000x10000	3.796316 s	526.826531 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.590294225 s


10000x10000x10000	3.590294 s	557.057409 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.845262694 s


10000x10000x10000	3.845263 s	520.120512 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.412489108 s


10000x10000x10000	3.412489 s	586.082457 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.796939054 s


10000x10000x10000	1.796939 s	1113.003803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.841583399 s


10000x10000x10000	1.841583 s	1086.021953 GFLOPS
File saved successfully
Number of cores = 13 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.798248567 s


10000x10000x10000	3.798249 s	526.558482 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.596443022 s


10000x10000x10000	3.596443 s	556.105015 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.846504060 s


10000x10000x10000	3.846504 s	519.952655 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.539681790 s


10000x10000x10000	3.539682 s	565.022541 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.819292284 s


10000x10000x10000	1.819292 s	1099.328578 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.842863183 s


10000x10000x10000	1.842863 s	1085.267761 GFLOPS
File saved successfully
Number of cores = 13 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.804450113 s


10000x10000x10000	3.804450 s	525.700151 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.595630382 s


10000x10000x10000	3.595630 s	556.230699 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.866510842 s


10000x10000x10000	3.866511 s	517.262225 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.428419949 s


10000x10000x10000	3.428420 s	583.359107 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.788005177 s


10000x10000x10000	1.788005 s	1118.564994 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.842938684 s


10000x10000x10000	1.842939 s	1085.223300 GFLOPS
File saved successfully
Number of cores = 13 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.799685270 s


10000x10000x10000	3.799685 s	526.359384 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.577909657 s


10000x10000x10000	3.577910 s	558.985607 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.827628061 s


10000x10000x10000	3.827628 s	522.516809 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.515506794 s


10000x10000x10000	3.515507 s	568.908017 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.782347054 s


10000x10000x10000	1.782347 s	1122.115918 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.847961719 s


10000x10000x10000	1.847962 s	1082.273501 GFLOPS
File saved successfully
Number of cores = 13 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.505486628 s


10000x10000x10000	3.505487 s	570.534197 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.430491200 s


10000x10000x10000	3.430491 s	583.006888 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.335977851 s


10000x10000x10000	3.335978 s	599.524364 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.117332590 s


10000x10000x10000	3.117333 s	641.574148 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.691727104 s


10000x10000x10000	1.691727 s	1182.223773 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.625617986 s


10000x10000x10000	1.625618 s	1230.301348 GFLOPS
File saved successfully
Number of cores = 14 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.554809293 s


10000x10000x10000	3.554809 s	562.618086 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.426121003 s


10000x10000x10000	3.426121 s	583.750544 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.329704980 s


10000x10000x10000	3.329705 s	600.653815 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.166267311 s


10000x10000x10000	3.166267 s	631.658607 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.762316069 s


10000x10000x10000	1.762316 s	1134.870206 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.716024273 s


10000x10000x10000	1.716024 s	1165.484680 GFLOPS
File saved successfully
Number of cores = 14 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.578499781 s


10000x10000x10000	3.578500 s	558.893425 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.434987679 s


10000x10000x10000	3.434988 s	582.243719 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.339527030 s


10000x10000x10000	3.339527 s	598.887202 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.165453249 s


10000x10000x10000	3.165453 s	631.821051 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.706663106 s


10000x10000x10000	1.706663 s	1171.877445 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.628034005 s


10000x10000x10000	1.628034 s	1228.475569 GFLOPS
File saved successfully
Number of cores = 14 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.469188007 s


10000x10000x10000	3.469188 s	576.503780 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.432502076 s


10000x10000x10000	3.432502 s	582.665343 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.338465134 s


10000x10000x10000	3.338465 s	599.077696 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.87547228 s


10000x10000x10000	3.087547 s	647.763371 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.689645226 s


10000x10000x10000	1.689645 s	1183.680437 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.719957706 s


10000x10000x10000	1.719958 s	1162.819291 GFLOPS
File saved successfully
Number of cores = 14 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.558247016 s


10000x10000x10000	3.558247 s	562.074525 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.448403601 s


10000x10000x10000	3.448404 s	579.978515 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.463362424 s


10000x10000x10000	3.463362 s	577.473494 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.186346587 s


10000x10000x10000	3.186347 s	627.678109 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.703324904 s


10000x10000x10000	1.703325 s	1174.174108 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.725926887 s


10000x10000x10000	1.725927 s	1158.797638 GFLOPS
File saved successfully
Number of cores = 14 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.429145070 s


10000x10000x10000	3.429145 s	583.235751 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.292404837 s


10000x10000x10000	3.292405 s	607.458711 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.144535742 s


10000x10000x10000	3.144536 s	636.023936 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.861465696 s


10000x10000x10000	2.861466 s	698.942504 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.660542151 s


10000x10000x10000	1.660542 s	1204.425915 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.547541672 s


10000x10000x10000	1.547542 s	1292.372306 GFLOPS
File saved successfully
Number of cores = 15 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.413816259 s


10000x10000x10000	3.413816 s	585.854612 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.290790479 s


10000x10000x10000	3.290790 s	607.756712 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.147542930 s


10000x10000x10000	3.147543 s	635.416274 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.815305077 s


10000x10000x10000	2.815305 s	710.402583 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.728538824 s


10000x10000x10000	1.728539 s	1157.046618 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.547350074 s


10000x10000x10000	1.547350 s	1292.532332 GFLOPS
File saved successfully
Number of cores = 15 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.432719162 s


10000x10000x10000	3.432719 s	582.628495 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.282857389 s


10000x10000x10000	3.282857 s	609.225368 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.151324976 s


10000x10000x10000	3.151325 s	634.653682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.892836593 s


10000x10000x10000	2.892837 s	691.362936 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.675037190 s


10000x10000x10000	1.675037 s	1194.003340 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.547003171 s


10000x10000x10000	1.547003 s	1292.822172 GFLOPS
File saved successfully
Number of cores = 15 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.431820556 s


10000x10000x10000	3.431821 s	582.781054 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.278147544 s


10000x10000x10000	3.278148 s	610.100666 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.187101392 s


10000x10000x10000	3.187101 s	627.529455 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.861779632 s


10000x10000x10000	2.861780 s	698.865831 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.748388561 s


10000x10000x10000	1.748389 s	1143.910481 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.553767428 s


10000x10000x10000	1.553767 s	1287.193929 GFLOPS
File saved successfully
Number of cores = 15 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.428031418 s


10000x10000x10000	3.428031 s	583.425225 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.287280618 s


10000x10000x10000	3.287281 s	608.405619 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.142191388 s


10000x10000x10000	3.142191 s	636.498467 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.839443454 s


10000x10000x10000	2.839443 s	704.363384 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.679204855 s


10000x10000x10000	1.679205 s	1191.039910 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.546343644 s


10000x10000x10000	1.546344 s	1293.373570 GFLOPS
File saved successfully
Number of cores = 15 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.680903850 s


10000x10000x10000	3.680904 s	543.344809 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.7665167 s


10000x10000x10000	3.007665 s	664.967637 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.898770705 s


10000x10000x10000	2.898771 s	689.947638 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.826933625 s


10000x10000x10000	2.826934 s	707.480353 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.547407715 s


10000x10000x10000	1.547408 s	1292.484185 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.495627365 s


10000x10000x10000	1.495627 s	1337.231483 GFLOPS
File saved successfully
Number of cores = 16 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.660222293 s


10000x10000x10000	3.660222 s	546.414900 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.12923963 s


10000x10000x10000	3.012924 s	663.806994 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.914882333 s


10000x10000x10000	2.914882 s	686.134043 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.909546336 s


10000x10000x10000	2.909546 s	687.392387 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.551243930 s


10000x10000x10000	1.551244 s	1289.287881 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.545126195 s


10000x10000x10000	1.545126 s	1294.392656 GFLOPS
File saved successfully
Number of cores = 16 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.705888563 s


10000x10000x10000	3.705889 s	539.681635 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.984401311 s


10000x10000x10000	2.984401 s	670.151160 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.912613951 s


10000x10000x10000	2.912614 s	686.668413 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.905226405 s


10000x10000x10000	2.905226 s	688.414506 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.499618520 s


10000x10000x10000	1.499619 s	1333.672513 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.491194890 s


10000x10000x10000	1.491195 s	1341.206313 GFLOPS
File saved successfully
Number of cores = 16 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.682277804 s


10000x10000x10000	3.682278 s	543.142073 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.969002752 s


10000x10000x10000	2.969003 s	673.626860 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.915700383 s


10000x10000x10000	2.915700 s	685.941536 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.911068955 s


10000x10000x10000	2.911069 s	687.032850 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.500563438 s


10000x10000x10000	1.500563 s	1332.832688 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.487930850 s


10000x10000x10000	1.487931 s	1344.148486 GFLOPS
File saved successfully
Number of cores = 16 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.662362232 s


10000x10000x10000	3.662362 s	546.095627 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.971125704 s


10000x10000x10000	2.971126 s	673.145534 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.905377253 s


10000x10000x10000	2.905377 s	688.378763 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.943501105 s


10000x10000x10000	2.943501 s	679.462969 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.538081919 s


10000x10000x10000	1.538082 s	1300.320858 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.482834693 s


10000x10000x10000	1.482835 s	1348.768011 GFLOPS
File saved successfully
Number of cores = 16 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.364571007 s


10000x10000x10000	3.364571 s	594.429422 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.972765445 s


10000x10000x10000	2.972765 s	672.774236 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.905715489 s


10000x10000x10000	2.905715 s	688.298633 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.673173976 s


10000x10000x10000	2.673174 s	748.174274 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.476560827 s


10000x10000x10000	1.476561 s	1354.498889 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.488580106 s


10000x10000x10000	1.488580 s	1343.562225 GFLOPS
File saved successfully
Number of cores = 17 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.381756070 s


10000x10000x10000	3.381756 s	591.408712 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.977563942 s


10000x10000x10000	2.977564 s	671.690025 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.901367627 s


10000x10000x10000	2.901368 s	689.330087 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.695777729 s


10000x10000x10000	2.695778 s	741.900928 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.483647393 s


10000x10000x10000	1.483647 s	1348.029194 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.491339415 s


10000x10000x10000	1.491339 s	1341.076337 GFLOPS
File saved successfully
Number of cores = 17 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.363723878 s


10000x10000x10000	3.363724 s	594.579125 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.977206400 s


10000x10000x10000	2.977206 s	671.770691 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.917589199 s


10000x10000x10000	2.917589 s	685.497465 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.765029975 s


10000x10000x10000	2.765030 s	723.319464 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.503879479 s


10000x10000x10000	1.503879 s	1329.893803 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.496734116 s


10000x10000x10000	1.496734 s	1336.242676 GFLOPS
File saved successfully
Number of cores = 17 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.363809264 s


10000x10000x10000	3.363809 s	594.564032 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.954236044 s


10000x10000x10000	2.954236 s	676.993974 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.912446096 s


10000x10000x10000	2.912446 s	686.707988 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.682957371 s


10000x10000x10000	2.682957 s	745.446059 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.494186849 s


10000x10000x10000	1.494187 s	1338.520682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.490204499 s


10000x10000x10000	1.490204 s	1342.097679 GFLOPS
File saved successfully
Number of cores = 17 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.386089868 s


10000x10000x10000	3.386090 s	590.651778 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.972893214 s


10000x10000x10000	2.972893 s	672.745321 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.908099085 s


10000x10000x10000	2.908099 s	687.734476 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.703041927 s


10000x10000x10000	2.703042 s	739.907132 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.484113434 s


10000x10000x10000	1.484113 s	1347.605887 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.503852956 s


10000x10000x10000	1.503853 s	1329.917258 GFLOPS
File saved successfully
Number of cores = 17 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.278077715 s


10000x10000x10000	3.278078 s	610.113662 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.879342094 s


10000x10000x10000	2.879342 s	694.603119 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.666455425 s


10000x10000x10000	2.666455 s	750.059416 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.594862585 s


10000x10000x10000	2.594863 s	770.753724 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.525168106 s


10000x10000x10000	1.525168 s	1311.330857 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.420697593 s


10000x10000x10000	1.420698 s	1407.759125 GFLOPS
File saved successfully
Number of cores = 18 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.242023761 s


10000x10000x10000	3.242024 s	616.898625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.889295996 s


10000x10000x10000	2.889296 s	692.210145 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.661711329 s


10000x10000x10000	2.661711 s	751.396283 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.594053316 s


10000x10000x10000	2.594053 s	770.994176 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.480162441 s


10000x10000x10000	1.480162 s	1351.203047 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.382227443 s


10000x10000x10000	1.382227 s	1446.939872 GFLOPS
File saved successfully
Number of cores = 18 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.261361182 s


10000x10000x10000	3.261361 s	613.240880 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.928122830 s


10000x10000x10000	2.928123 s	683.031456 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.667718058 s


10000x10000x10000	2.667718 s	749.704413 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.598407470 s


10000x10000x10000	2.598407 s	769.702221 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.523251686 s


10000x10000x10000	1.523252 s	1312.980657 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.420967891 s


10000x10000x10000	1.420968 s	1407.491339 GFLOPS
File saved successfully
Number of cores = 18 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.226615917 s


10000x10000x10000	3.226616 s	619.844460 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.902254744 s


10000x10000x10000	2.902255 s	689.119384 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.661611139 s


10000x10000x10000	2.661611 s	751.424568 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.586397909 s


10000x10000x10000	2.586398 s	773.276221 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.560478345 s


10000x10000x10000	1.560478 s	1281.658285 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.374341556 s


10000x10000x10000	1.374342 s	1455.242324 GFLOPS
File saved successfully
Number of cores = 18 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.264816419 s


10000x10000x10000	3.264816 s	612.591871 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.905671713 s


10000x10000x10000	2.905672 s	688.309003 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.654955450 s


10000x10000x10000	2.654955 s	753.308309 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.644310808 s


10000x10000x10000	2.644311 s	756.340743 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.475789816 s


10000x10000x10000	1.475790 s	1355.206533 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.382409259 s


10000x10000x10000	1.382409 s	1446.749569 GFLOPS
File saved successfully
Number of cores = 18 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.285106490 s


10000x10000x10000	3.285106 s	608.808270 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.831919891 s


10000x10000x10000	2.831920 s	706.234667 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.670746696 s


10000x10000x10000	2.670747 s	748.854245 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.631180589 s


10000x10000x10000	2.631181 s	760.115063 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.527821973 s


10000x10000x10000	1.527822 s	1309.053041 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.377042020 s


10000x10000x10000	1.377042 s	1452.388504 GFLOPS
File saved successfully
Number of cores = 19 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.261216067 s


10000x10000x10000	3.261216 s	613.268167 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.834028605 s


10000x10000x10000	2.834029 s	705.709179 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.668382974 s


10000x10000x10000	2.668383 s	749.517599 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.635722424 s


10000x10000x10000	2.635722 s	758.805245 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.539623830 s


10000x10000x10000	1.539624 s	1299.018605 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.438888658 s


10000x10000x10000	1.438889 s	1389.961613 GFLOPS
File saved successfully
Number of cores = 19 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.253268702 s


10000x10000x10000	3.253269 s	614.766311 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.827358723 s


10000x10000x10000	2.827359 s	707.373983 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.651877856 s


10000x10000x10000	2.651878 s	754.182549 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.586236836 s


10000x10000x10000	2.586237 s	773.324381 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.518322181 s


10000x10000x10000	1.518322 s	1317.243484 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.377854174 s


10000x10000x10000	1.377854 s	1451.532417 GFLOPS
File saved successfully
Number of cores = 19 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.257421125 s


10000x10000x10000	3.257421 s	613.982633 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.825405162 s


10000x10000x10000	2.825405 s	707.863080 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.670715028 s


10000x10000x10000	2.670715 s	748.863124 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.623635694 s


10000x10000x10000	2.623636 s	762.300957 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.566122141 s


10000x10000x10000	1.566122 s	1277.039605 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.368677083 s


10000x10000x10000	1.368677 s	1461.265060 GFLOPS
File saved successfully
Number of cores = 19 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.242762214 s


10000x10000x10000	3.242762 s	616.758143 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.819359395 s


10000x10000x10000	2.819359 s	709.381005 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.675176012 s


10000x10000x10000	2.675176 s	747.614359 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.594653046 s


10000x10000x10000	2.594653 s	770.815968 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.550058010 s


10000x10000x10000	1.550058 s	1290.274291 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.372257302 s


10000x10000x10000	1.372257 s	1457.452620 GFLOPS
File saved successfully
Number of cores = 19 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.553693981 s


10000x10000x10000	3.553694 s	562.794661 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.597916649 s


10000x10000x10000	2.597917 s	769.847640 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.570317133 s


10000x10000x10000	2.570317 s	778.114099 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.360179542 s


10000x10000x10000	2.360180 s	847.393160 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.563538986 s


10000x10000x10000	1.563539 s	1279.149428 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.409574155 s


10000x10000x10000	1.409574 s	1418.868240 GFLOPS
File saved successfully
Number of cores = 20 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.586105659 s


10000x10000x10000	3.586106 s	557.708052 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.597842900 s


10000x10000x10000	2.597843 s	769.869494 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.578756850 s


10000x10000x10000	2.578757 s	775.567499 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.344040751 s


10000x10000x10000	2.344041 s	853.227487 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.598143130 s


10000x10000x10000	1.598143 s	1251.452365 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.395138653 s


10000x10000x10000	1.395139 s	1433.549272 GFLOPS
File saved successfully
Number of cores = 20 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.555819745 s


10000x10000x10000	3.555820 s	562.458208 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.599158565 s


10000x10000x10000	2.599159 s	769.479795 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.569370817 s


10000x10000x10000	2.569371 s	778.400683 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.336786877 s


10000x10000x10000	2.336787 s	855.876083 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.587269143 s


10000x10000x10000	1.587269 s	1260.025755 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.399361311 s


10000x10000x10000	1.399361 s	1429.223449 GFLOPS
File saved successfully
Number of cores = 20 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.560916137 s


10000x10000x10000	3.560916 s	561.653216 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.630305480 s


10000x10000x10000	2.630305 s	760.367955 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.588881648 s


10000x10000x10000	2.588882 s	772.534350 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.374310882 s


10000x10000x10000	2.374311 s	842.349675 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.567608212 s


10000x10000x10000	1.567608 s	1275.828989 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.437909979 s


10000x10000x10000	1.437910 s	1390.907657 GFLOPS
File saved successfully
Number of cores = 20 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.573068533 s


10000x10000x10000	3.573069 s	559.742972 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.635053643 s


10000x10000x10000	2.635054 s	758.997831 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.580312597 s


10000x10000x10000	2.580313 s	775.099886 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.370920195 s


10000x10000x10000	2.370920 s	843.554331 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.558033178 s


10000x10000x10000	1.558033 s	1283.669711 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.406434391 s


10000x10000x10000	1.406434 s	1422.035761 GFLOPS
File saved successfully
Number of cores = 20 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.442257355 s


10000x10000x10000	3.442257 s	581.014083 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.637010652 s


10000x10000x10000	2.637011 s	758.434555 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.480733054 s


10000x10000x10000	2.480733 s	806.213307 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.360996349 s


10000x10000x10000	2.360996 s	847.099997 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.613781393 s


10000x10000x10000	1.613781 s	1239.325232 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.273803828 s


10000x10000x10000	1.273804 s	1570.100479 GFLOPS
File saved successfully
Number of cores = 21 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.535425059 s


10000x10000x10000	3.535425 s	565.702841 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.641664513 s


10000x10000x10000	2.641665 s	757.098409 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.475264615 s


10000x10000x10000	2.475265 s	807.994421 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.367269152 s


10000x10000x10000	2.367269 s	844.855347 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.602313766 s


10000x10000x10000	1.602314 s	1248.194981 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.278236237 s


10000x10000x10000	1.278236 s	1564.656002 GFLOPS
File saved successfully
Number of cores = 21 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.527026045 s


10000x10000x10000	3.527026 s	567.049966 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.642899888 s


10000x10000x10000	2.642900 s	756.744517 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.465691828 s


10000x10000x10000	2.465692 s	811.131374 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.240534894 s


10000x10000x10000	2.240535 s	892.643987 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.606538779 s


10000x10000x10000	1.606539 s	1244.912371 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.271469765 s


10000x10000x10000	1.271470 s	1572.982744 GFLOPS
File saved successfully
Number of cores = 21 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.432861633 s


10000x10000x10000	3.432862 s	582.604315 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.647097118 s


10000x10000x10000	2.647097 s	755.544625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.455620356 s


10000x10000x10000	2.455620 s	814.458145 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.371715520 s


10000x10000x10000	2.371716 s	843.271456 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.617319360 s


10000x10000x10000	1.617319 s	1236.614147 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.273142401 s


10000x10000x10000	1.273142 s	1570.916182 GFLOPS
File saved successfully
Number of cores = 21 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.420691145 s


10000x10000x10000	3.420691 s	584.677165 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.650146990 s


10000x10000x10000	2.650147 s	754.675121 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.457549213 s


10000x10000x10000	2.457549 s	813.818901 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.372441431 s


10000x10000x10000	2.372441 s	843.013435 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.603875615 s


10000x10000x10000	1.603876 s	1246.979492 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.278612329 s


10000x10000x10000	1.278612 s	1564.195773 GFLOPS
File saved successfully
Number of cores = 21 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.350873153 s


10000x10000x10000	3.350873 s	596.859358 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.683324843 s


10000x10000x10000	2.683325 s	745.343973 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.404054463 s


10000x10000x10000	2.404054 s	831.927908 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.247638399 s


10000x10000x10000	2.247638 s	889.822847 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.695913720 s


10000x10000x10000	1.695914 s	1179.305277 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.120980301 s


10000x10000x10000	1.120980 s	1784.152673 GFLOPS
File saved successfully
Number of cores = 22 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.336260772 s


10000x10000x10000	3.336261 s	599.473523 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.698199236 s


10000x10000x10000	2.698199 s	741.235107 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.381048464 s


10000x10000x10000	2.381048 s	839.966103 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.280103099 s


10000x10000x10000	2.280103 s	877.153319 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.670068573 s


10000x10000x10000	1.670069 s	1197.555617 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.119615729 s


10000x10000x10000	1.119616 s	1786.327173 GFLOPS
File saved successfully
Number of cores = 22 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.341397387 s


10000x10000x10000	3.341397 s	598.551973 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.678752518 s


10000x10000x10000	2.678753 s	746.616190 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.404641435 s


10000x10000x10000	2.404641 s	831.724835 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.249535406 s


10000x10000x10000	2.249535 s	889.072470 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.693858590 s


10000x10000x10000	1.693859 s	1180.736109 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.117573598 s


10000x10000x10000	1.117574 s	1789.591311 GFLOPS
File saved successfully
Number of cores = 22 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.345364974 s


10000x10000x10000	3.345365 s	597.842094 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.666052251 s


10000x10000x10000	2.666052 s	750.172844 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.397823935 s


10000x10000x10000	2.397824 s	834.089597 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.224254335 s


10000x10000x10000	2.224254 s	899.177746 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.680690487 s


10000x10000x10000	1.680690 s	1189.987101 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.119549719 s


10000x10000x10000	1.119550 s	1786.432497 GFLOPS
File saved successfully
Number of cores = 22 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.345157403 s


10000x10000x10000	3.345157 s	597.879190 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.665413347 s


10000x10000x10000	2.665413 s	750.352662 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.396462717 s


10000x10000x10000	2.396463 s	834.563370 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.241027629 s


10000x10000x10000	2.241028 s	892.447721 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.697945045 s


10000x10000x10000	1.697945 s	1177.894424 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.120082909 s


10000x10000x10000	1.120083 s	1785.582106 GFLOPS
File saved successfully
Number of cores = 22 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.418911554 s


10000x10000x10000	3.418912 s	584.981497 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.662381352 s


10000x10000x10000	2.662381 s	751.207185 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.399413054 s


10000x10000x10000	2.399413 s	833.537184 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.297833701 s


10000x10000x10000	2.297834 s	870.385006 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.761120194 s


10000x10000x10000	1.761120 s	1135.640831 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.116917488 s


10000x10000x10000	1.116917 s	1790.642569 GFLOPS
File saved successfully
Number of cores = 23 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.676277818 s


10000x10000x10000	3.676278 s	544.028525 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.659688517 s


10000x10000x10000	2.659689 s	751.967754 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.396757226 s


10000x10000x10000	2.396757 s	834.460820 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.282232473 s


10000x10000x10000	2.282232 s	876.334915 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.765733998 s


10000x10000x10000	1.765734 s	1132.673439 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.114485164 s


10000x10000x10000	1.114485 s	1794.550582 GFLOPS
File saved successfully
Number of cores = 23 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.394747650 s


10000x10000x10000	3.394748 s	589.145411 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.661024285 s


10000x10000x10000	2.661024 s	751.590285 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.389837158 s


10000x10000x10000	2.389837 s	836.877104 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.337957077 s


10000x10000x10000	2.337957 s	855.447698 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.771550161 s


10000x10000x10000	1.771550 s	1128.954767 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.116529135 s


10000x10000x10000	1.116529 s	1791.265393 GFLOPS
File saved successfully
Number of cores = 23 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.427579893 s


10000x10000x10000	3.427580 s	583.502081 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.664468274 s


10000x10000x10000	2.664468 s	750.618808 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.379166058 s


10000x10000x10000	2.379166 s	840.630688 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.239980062 s


10000x10000x10000	2.239980 s	892.865090 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.674802844 s


10000x10000x10000	1.674803 s	1194.170411 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.116591209 s


10000x10000x10000	1.116591 s	1791.165812 GFLOPS
File saved successfully
Number of cores = 23 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.422654731 s


10000x10000x10000	3.422655 s	584.341734 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.723737908 s


10000x10000x10000	2.723738 s	734.285040 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.401227029 s


10000x10000x10000	2.401227 s	832.907499 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.289595341 s


10000x10000x10000	2.289595 s	873.516802 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.765905218 s


10000x10000x10000	1.765905 s	1132.563616 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.121885227 s


10000x10000x10000	1.121885 s	1782.713554 GFLOPS
File saved successfully
Number of cores = 23 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.512719208 s


10000x10000x10000	3.512719 s	569.359485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.659651751 s


10000x10000x10000	2.659652 s	751.978149 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.434363683 s


10000x10000x10000	2.434364 s	821.569930 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.18660452 s


10000x10000x10000	2.018660 s	990.756022 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.795969552 s


10000x10000x10000	1.795970 s	1113.604625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.193050383 s


10000x10000x10000	1.193050 s	1676.375138 GFLOPS
File saved successfully
Number of cores = 24 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.531581777 s


10000x10000x10000	3.531582 s	566.318473 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.649615083 s


10000x10000x10000	2.649615 s	754.826621 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.425236877 s


10000x10000x10000	2.425237 s	824.661714 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.85717993 s


10000x10000x10000	2.085718 s	958.902405 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.784923737 s


10000x10000x10000	1.784924 s	1120.496052 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.193759869 s


10000x10000x10000	1.193760 s	1675.378819 GFLOPS
File saved successfully
Number of cores = 24 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.528447445 s


10000x10000x10000	3.528447 s	566.821536 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.648725020 s


10000x10000x10000	2.648725 s	755.080269 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.426770907 s


10000x10000x10000	2.426771 s	824.140422 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.24726733 s


10000x10000x10000	2.024727 s	987.787620 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.802204344 s


10000x10000x10000	1.802204 s	1109.752069 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.184824838 s


10000x10000x10000	1.184825 s	1688.013229 GFLOPS
File saved successfully
Number of cores = 24 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.516465068 s


10000x10000x10000	3.516465 s	568.752984 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.651502432 s


10000x10000x10000	2.651502 s	754.289333 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.422457218 s


10000x10000x10000	2.422457 s	825.607976 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.82697704 s


10000x10000x10000	2.082698 s	960.292987 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.788656706 s


10000x10000x10000	1.788657 s	1118.157550 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.194496824 s


10000x10000x10000	1.194497 s	1674.345180 GFLOPS
File saved successfully
Number of cores = 24 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.519819095 s


10000x10000x10000	3.519819 s	568.211021 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.650572005 s


10000x10000x10000	2.650572 s	754.554110 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.426712810 s


10000x10000x10000	2.426713 s	824.160153 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.37797550 s


10000x10000x10000	2.037798 s	981.451764 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.772340293 s


10000x10000x10000	1.772340 s	1128.451465 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.194308642 s


10000x10000x10000	1.194309 s	1674.608999 GFLOPS
File saved successfully
Number of cores = 24 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.500098071 s


10000x10000x10000	3.500098 s	571.412560 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.682680097 s


10000x10000x10000	2.682680 s	745.523107 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.426565082 s


10000x10000x10000	2.426565 s	824.210327 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.20970485 s


10000x10000x10000	2.020970 s	989.623557 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.839926272 s


10000x10000x10000	1.839926 s	1087.000077 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.217868606 s


10000x10000x10000	1.217869 s	1642.213282 GFLOPS
File saved successfully
Number of cores = 25 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.486130021 s


10000x10000x10000	3.486130 s	573.702067 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.705202003 s


10000x10000x10000	2.705202 s	739.316324 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.446456677 s


10000x10000x10000	2.446457 s	817.508856 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.46845338 s


10000x10000x10000	2.046845 s	977.113396 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.835414019 s


10000x10000x10000	1.835414 s	1089.672401 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.206148567 s


10000x10000x10000	1.206149 s	1658.170523 GFLOPS
File saved successfully
Number of cores = 25 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.539957499 s


10000x10000x10000	3.539957 s	564.978535 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.671074682 s


10000x10000x10000	2.671075 s	748.762292 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.442441558 s


10000x10000x10000	2.442442 s	818.852756 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.56295584 s


10000x10000x10000	2.056296 s	972.622815 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.832858877 s


10000x10000x10000	1.832859 s	1091.191485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.205083366 s


10000x10000x10000	1.205083 s	1659.636218 GFLOPS
File saved successfully
Number of cores = 25 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.509158183 s


10000x10000x10000	3.509158 s	569.937260 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.671151249 s


10000x10000x10000	2.671151 s	748.740829 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.440159794 s


10000x10000x10000	2.440160 s	819.618455 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.30620212 s


10000x10000x10000	2.030620 s	984.920759 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.832243843 s


10000x10000x10000	1.832244 s	1091.557768 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.219843817 s


10000x10000x10000	1.219844 s	1639.554156 GFLOPS
File saved successfully
Number of cores = 25 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.489544677 s


10000x10000x10000	3.489545 s	573.140677 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.666908674 s


10000x10000x10000	2.666909 s	749.931942 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.447009508 s


10000x10000x10000	2.447010 s	817.324164 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.45501013 s


10000x10000x10000	2.045501 s	977.755566 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.836311912 s


10000x10000x10000	1.836312 s	1089.139588 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.214817019 s


10000x10000x10000	1.214817 s	1646.338476 GFLOPS
File saved successfully
Number of cores = 25 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.674494028 s


10000x10000x10000	3.674494 s	544.292625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.781782567 s


10000x10000x10000	2.781783 s	718.963453 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.333644520 s


10000x10000x10000	2.333645 s	857.028559 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.849135680 s


10000x10000x10000	1.849136 s	1081.586398 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.948667677 s


10000x10000x10000	1.948668 s	1026.342266 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.962941870 s


10000x10000x10000	0.962942 s	2076.968571 GFLOPS
File saved successfully
Number of cores = 26 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.610358073 s


10000x10000x10000	3.610358 s	553.961673 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.780841976 s


10000x10000x10000	2.780842 s	719.206635 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.314230714 s


10000x10000x10000	2.314231 s	864.218069 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.918667422 s


10000x10000x10000	1.918667 s	1042.390139 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.933224980 s


10000x10000x10000	1.933225 s	1034.540739 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.961569836 s


10000x10000x10000	0.961570 s	2079.932133 GFLOPS
File saved successfully
Number of cores = 26 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.631660243 s


10000x10000x10000	3.631660 s	550.712310 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.797926477 s


10000x10000x10000	2.797926 s	714.815066 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.329940340 s


10000x10000x10000	2.329940 s	858.391078 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.925342857 s


10000x10000x10000	1.925343 s	1038.776025 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.939557909 s


10000x10000x10000	1.939558 s	1031.162818 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.961914435 s


10000x10000x10000	0.961914 s	2079.187012 GFLOPS
File saved successfully
Number of cores = 26 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.627988589 s


10000x10000x10000	3.627989 s	551.269650 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.757848032 s


10000x10000x10000	2.757848 s	725.203121 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.321912290 s


10000x10000x10000	2.321912 s	861.358979 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.893705731 s


10000x10000x10000	1.893706 s	1056.130299 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.948034457 s


10000x10000x10000	1.948034 s	1026.675885 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.963699410 s


10000x10000x10000	0.963699 s	2075.335918 GFLOPS
File saved successfully
Number of cores = 26 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.572271503 s


10000x10000x10000	3.572272 s	559.867860 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.771830358 s


10000x10000x10000	2.771830 s	721.544879 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.323255175 s


10000x10000x10000	2.323255 s	860.861098 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.875853982 s


10000x10000x10000	1.875854 s	1066.181067 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.735269001 s


10000x10000x10000	1.735269 s	1152.559055 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.965502241 s


10000x10000x10000	0.965502 s	2071.460754 GFLOPS
File saved successfully
Number of cores = 26 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.676357530 s


10000x10000x10000	3.676358 s	544.016730 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.784449242 s


10000x10000x10000	2.784449 s	718.274900 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.665265310 s


10000x10000x10000	2.665265 s	750.394339 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.966298376 s


10000x10000x10000	1.966298 s	1017.139629 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.699633384 s


10000x10000x10000	1.699633 s	1176.724356 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.571346077 s


10000x10000x10000	1.571346 s	1272.794090 GFLOPS
File saved successfully
Number of cores = 27 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.614240697 s


10000x10000x10000	3.614241 s	553.366576 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.798251559 s


10000x10000x10000	2.798252 s	714.732024 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.674550756 s


10000x10000x10000	2.674551 s	747.789136 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.988559686 s


10000x10000x10000	1.988560 s	1005.753065 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.961101945 s


10000x10000x10000	1.961102 s	1019.834795 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.560657644 s


10000x10000x10000	1.560658 s	1281.511040 GFLOPS
File saved successfully
Number of cores = 27 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.667554212 s


10000x10000x10000	3.667554 s	545.322546 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.774766748 s


10000x10000x10000	2.774767 s	720.781306 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.659984172 s


10000x10000x10000	2.659984 s	751.884173 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.85527879 s


10000x10000x10000	2.085528 s	958.989817 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.980498855 s


10000x10000x10000	1.980499 s	1009.846582 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.571929342 s


10000x10000x10000	1.571929 s	1272.321819 GFLOPS
File saved successfully
Number of cores = 27 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.673743250 s


10000x10000x10000	3.673743 s	544.403858 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.780004965 s


10000x10000x10000	2.780005 s	719.423176 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.658419702 s


10000x10000x10000	2.658420 s	752.326654 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.33269851 s


10000x10000x10000	2.033270 s	983.637267 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.976821130 s


10000x10000x10000	1.976821 s	1011.725325 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.574492330 s


10000x10000x10000	1.574492 s	1270.250710 GFLOPS
File saved successfully
Number of cores = 27 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.609368920 s


10000x10000x10000	3.609369 s	554.113488 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.805829955 s


10000x10000x10000	2.805830 s	712.801571 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.663015821 s


10000x10000x10000	2.663016 s	751.028208 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.25655285 s


10000x10000x10000	2.025655 s	987.334822 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.949914117 s


10000x10000x10000	1.949914 s	1025.686199 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.572372281 s


10000x10000x10000	1.572372 s	1271.963405 GFLOPS
File saved successfully
Number of cores = 27 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.521339771 s


10000x10000x10000	3.521340 s	567.965641 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.843989324 s


10000x10000x10000	2.843989 s	703.237520 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.552614986 s


10000x10000x10000	2.552615 s	783.510248 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.771199831 s


10000x10000x10000	1.771200 s	1129.178066 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.155509082 s


10000x10000x10000	2.155509 s	927.855056 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.293161056 s


10000x10000x10000	1.293161 s	1546.597766 GFLOPS
File saved successfully
Number of cores = 28 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.572246610 s


10000x10000x10000	3.572247 s	559.871761 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.836800119 s


10000x10000x10000	2.836800 s	705.019711 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.546803568 s


10000x10000x10000	2.546804 s	785.298099 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.791635608 s


10000x10000x10000	1.791636 s	1116.298421 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.96384534 s


10000x10000x10000	2.096385 s	954.023447 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.298184778 s


10000x10000x10000	1.298185 s	1540.612734 GFLOPS
File saved successfully
Number of cores = 28 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.523105983 s


10000x10000x10000	3.523106 s	567.680907 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.836740365 s


10000x10000x10000	2.836740 s	705.034562 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.552086489 s


10000x10000x10000	2.552086 s	783.672500 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.779661619 s


10000x10000x10000	1.779662 s	1123.809144 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.134856547 s


10000x10000x10000	2.134857 s	936.831097 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.305067345 s


10000x10000x10000	1.305067 s	1532.487965 GFLOPS
File saved successfully
Number of cores = 28 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.471151003 s


10000x10000x10000	3.471151 s	576.177757 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.824756111 s


10000x10000x10000	2.824756 s	708.025727 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.546364977 s


10000x10000x10000	2.546365 s	785.433360 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.810577426 s


10000x10000x10000	1.810577 s	1104.619980 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.98219763 s


10000x10000x10000	2.098220 s	953.189001 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.302330790 s


10000x10000x10000	1.302331 s	1535.708144 GFLOPS
File saved successfully
Number of cores = 28 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.516934333 s


10000x10000x10000	3.516934 s	568.677095 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.838942444 s


10000x10000x10000	2.838942 s	704.487688 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.559598428 s


10000x10000x10000	2.559598 s	781.372569 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.737863609 s


10000x10000x10000	1.737864 s	1150.838299 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.107763743 s


10000x10000x10000	2.107764 s	948.872950 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.289427853 s


10000x10000x10000	1.289428 s	1551.075537 GFLOPS
File saved successfully
Number of cores = 28 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.564876820 s


10000x10000x10000	3.564877 s	561.029203 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.898074397 s


10000x10000x10000	2.898074 s	690.113408 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.546952925 s


10000x10000x10000	2.546953 s	785.252048 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.767200667 s


10000x10000x10000	1.767201 s	1131.733389 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.141468974 s


10000x10000x10000	2.141469 s	933.938350 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.289396020 s


10000x10000x10000	1.289396 s	1551.113831 GFLOPS
File saved successfully
Number of cores = 29 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.591375101 s


10000x10000x10000	3.591375 s	556.889755 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.847105840 s


10000x10000x10000	2.847106 s	702.467738 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.550069516 s


10000x10000x10000	2.550070 s	784.292345 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.810353252 s


10000x10000x10000	1.810353 s	1104.756764 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.160296549 s


10000x10000x10000	2.160297 s	925.798822 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.297553778 s


10000x10000x10000	1.297554 s	1541.361933 GFLOPS
File saved successfully
Number of cores = 29 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.576806354 s


10000x10000x10000	3.576806 s	559.158032 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.861025673 s


10000x10000x10000	2.861026 s	699.050001 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.559396591 s


10000x10000x10000	2.559397 s	781.434189 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.773611166 s


10000x10000x10000	1.773611 s	1127.642878 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.150559046 s


10000x10000x10000	2.150559 s	929.990741 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.328902910 s


10000x10000x10000	1.328903 s	1505.000843 GFLOPS
File saved successfully
Number of cores = 29 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.664110843 s


10000x10000x10000	3.664111 s	545.835016 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.877059865 s


10000x10000x10000	2.877060 s	695.154114 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.543799685 s


10000x10000x10000	2.543800 s	786.225430 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.745222165 s


10000x10000x10000	1.745222 s	1145.985904 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.165287683 s


10000x10000x10000	2.165288 s	923.664793 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.340440168 s


10000x10000x10000	1.340440 s	1492.047200 GFLOPS
File saved successfully
Number of cores = 29 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.586273954 s


10000x10000x10000	3.586274 s	557.681880 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.869769159 s


10000x10000x10000	2.869769 s	696.920166 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.544144664 s


10000x10000x10000	2.544145 s	786.118820 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.787641761 s


10000x10000x10000	1.787642 s	1118.792391 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.155631392 s


10000x10000x10000	2.155631 s	927.802410 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.338452703 s


10000x10000x10000	1.338453 s	1494.262738 GFLOPS
File saved successfully
Number of cores = 29 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.538776876 s


10000x10000x10000	3.538777 s	565.167025 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.931090018 s


10000x10000x10000	2.931090 s	682.340013 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.423363808 s


10000x10000x10000	2.423364 s	825.299112 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.592608784 s


10000x10000x10000	1.592609 s	1255.801186 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.173694786 s


10000x10000x10000	2.173695 s	920.092376 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.22429836 s


10000x10000x10000	1.022430 s	1956.124449 GFLOPS
File saved successfully
Number of cores = 30 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.511731160 s


10000x10000x10000	3.511731 s	569.519678 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.927423737 s


10000x10000x10000	2.927424 s	683.194570 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.427679591 s


10000x10000x10000	2.427680 s	823.831945 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.598845719 s


10000x10000x10000	1.598846 s	1250.902433 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.158028995 s


10000x10000x10000	2.158029 s	926.771607 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.12928846 s


10000x10000x10000	1.012929 s	1974.472351 GFLOPS
File saved successfully
Number of cores = 30 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.780650902 s


10000x10000x10000	3.780651 s	529.009436 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.893332206 s


10000x10000x10000	2.893332 s	691.244509 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.409769258 s


10000x10000x10000	2.409769 s	829.954982 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.595984138 s


10000x10000x10000	1.595984 s	1253.145287 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.194115885 s


10000x10000x10000	2.194116 s	911.528882 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.13949284 s


10000x10000x10000	1.013949 s	1972.485243 GFLOPS
File saved successfully
Number of cores = 30 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.558614477 s


10000x10000x10000	3.558614 s	562.016485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.904670718 s


10000x10000x10000	2.904671 s	688.546205 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.419710988 s


10000x10000x10000	2.419711 s	826.544992 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.585839918 s


10000x10000x10000	1.585840 s	1261.161343 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.148882439 s


10000x10000x10000	2.148882 s	930.716341 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.13347273 s


10000x10000x10000	1.013347 s	1973.657060 GFLOPS
File saved successfully
Number of cores = 30 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.509191154 s


10000x10000x10000	3.509191 s	569.931905 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.942240678 s


10000x10000x10000	2.942241 s	679.754044 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.420288643 s


10000x10000x10000	2.420289 s	826.347719 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.611006279 s


10000x10000x10000	1.611006 s	1241.460090 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.187841790 s


10000x10000x10000	2.187842 s	914.142882 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.7895324 s


10000x10000x10000	1.007895 s	1984.333048 GFLOPS
File saved successfully
Number of cores = 30 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.610608729 s


10000x10000x10000	3.610609 s	553.923216 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.932274878 s


10000x10000x10000	2.932275 s	682.064296 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.404709037 s


10000x10000x10000	2.404709 s	831.701453 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.607358716 s


10000x10000x10000	1.607359 s	1244.277323 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.222861220 s


10000x10000x10000	2.222861 s	899.741280 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.5011542 s


10000x10000x10000	1.005012 s	1990.026897 GFLOPS
File saved successfully
Number of cores = 31 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.658088177 s


10000x10000x10000	3.658088 s	546.733677 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.910748131 s


10000x10000x10000	2.910748 s	687.108575 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.419630049 s


10000x10000x10000	2.419630 s	826.572641 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.605546648 s


10000x10000x10000	1.605547 s	1245.681651 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.194502967 s


10000x10000x10000	2.194503 s	911.368100 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.23233827 s


10000x10000x10000	1.023234 s	1954.587453 GFLOPS
File saved successfully
Number of cores = 31 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.607506057 s


10000x10000x10000	3.607506 s	554.399624 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.922218723 s


10000x10000x10000	2.922219 s	684.411466 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.433887111 s


10000x10000x10000	2.433887 s	821.730799 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.622675436 s


10000x10000x10000	1.622675 s	1232.532369 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.183018691 s


10000x10000x10000	2.183019 s	916.162563 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.16761958 s


10000x10000x10000	1.016762 s	1967.028747 GFLOPS
File saved successfully
Number of cores = 31 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.582003290 s


10000x10000x10000	3.582003 s	558.346779 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.927615178 s


10000x10000x10000	2.927615 s	683.149895 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.423385648 s


10000x10000x10000	2.423386 s	825.291675 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.608693980 s


10000x10000x10000	1.608694 s	1243.244536 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.157618623 s


10000x10000x10000	2.157619 s	926.947876 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.19068505 s


10000x10000x10000	1.019069 s	1962.576598 GFLOPS
File saved successfully
Number of cores = 31 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.23373723 s


10000x10000x10000	3.023374 s	661.512662 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.939509978 s


10000x10000x10000	2.939510 s	680.385512 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.419198737 s


10000x10000x10000	2.419199 s	826.720008 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.583574939 s


10000x10000x10000	1.583575 s	1262.965175 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.163721955 s


10000x10000x10000	2.163722 s	924.333182 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.20278310 s


10000x10000x10000	1.020278 s	1960.249454 GFLOPS
File saved successfully
Number of cores = 31 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.470284942 s


10000x10000x10000	3.470285 s	576.321551 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.981041624 s


10000x10000x10000	2.981042 s	670.906432 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.622136688 s


10000x10000x10000	2.622137 s	762.736744 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.528775923 s


10000x10000x10000	1.528776 s	1308.236197 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.536666616 s


10000x10000x10000	1.536667 s	1301.518481 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.209296877 s


10000x10000x10000	1.209297 s	1653.853605 GFLOPS
File saved successfully
Number of cores = 32 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.424952435 s


10000x10000x10000	3.424952 s	583.949715 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.966095725 s


10000x10000x10000	2.966096 s	674.287071 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.631886347 s


10000x10000x10000	2.631886 s	759.911233 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.534103468 s


10000x10000x10000	1.534103 s	1303.693031 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.532588310 s


10000x10000x10000	1.532588 s	1304.981897 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.211056267 s


10000x10000x10000	1.211056 s	1651.450931 GFLOPS
File saved successfully
Number of cores = 32 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.477914897 s


10000x10000x10000	3.477915 s	575.057199 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.968227745 s


10000x10000x10000	2.968228 s	673.802744 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.624644904 s


10000x10000x10000	2.624645 s	762.007842 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.549612733 s


10000x10000x10000	1.549613 s	1290.645048 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.531852550 s


10000x10000x10000	1.531853 s	1305.608689 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.218460741 s


10000x10000x10000	1.218461 s	1641.415216 GFLOPS
File saved successfully
Number of cores = 32 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.484123589 s


10000x10000x10000	3.484124 s	574.032450 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.960904949 s


10000x10000x10000	2.960905 s	675.469167 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.621059744 s


10000x10000x10000	2.621060 s	763.050138 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.537948393 s


10000x10000x10000	1.537948 s	1300.433753 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.532561618 s


10000x10000x10000	1.532562 s	1305.004625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.214469589 s


10000x10000x10000	1.214470 s	1646.809453 GFLOPS
File saved successfully
Number of cores = 32 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.515738613 s


10000x10000x10000	3.515739 s	568.870505 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.971213797 s


10000x10000x10000	2.971214 s	673.125576 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.618768094 s


10000x10000x10000	2.618768 s	763.717874 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.562254768 s


10000x10000x10000	1.562255 s	1280.200926 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.538068996 s


10000x10000x10000	1.538069 s	1300.331783 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.201782592 s


10000x10000x10000	1.201783 s	1664.194517 GFLOPS
File saved successfully
Number of cores = 32 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.953363411 s


10000x10000x10000	3.953363 s	505.898343 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.933084789 s


10000x10000x10000	2.933085 s	681.875958 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.261460700 s


10000x10000x10000	2.261461 s	884.384150 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.666099344 s


10000x10000x10000	1.666099 s	1200.408611 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.558607735 s


10000x10000x10000	1.558608 s	1283.196506 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.842412679 s


10000x10000x10000	0.842413 s	2374.133308 GFLOPS
File saved successfully
Number of cores = 33 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.900256898 s


10000x10000x10000	3.900257 s	512.786735 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.946200005 s


10000x10000x10000	2.946200 s	678.840539 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.268024275 s


10000x10000x10000	2.268024 s	881.824777 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.639161192 s


10000x10000x10000	1.639161 s	1220.136256 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.556474735 s


10000x10000x10000	1.556475 s	1284.955004 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.848653850 s


10000x10000x10000	0.848654 s	2356.673454 GFLOPS
File saved successfully
Number of cores = 33 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.606749159 s


10000x10000x10000	3.606749 s	554.515968 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.957941668 s


10000x10000x10000	2.957942 s	676.145856 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.259544790 s


10000x10000x10000	2.259545 s	885.134036 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.642355380 s


10000x10000x10000	1.642355 s	1217.763235 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.569454393 s


10000x10000x10000	1.569454 s	1274.328205 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.853139619 s


10000x10000x10000	0.853140 s	2344.282173 GFLOPS
File saved successfully
Number of cores = 33 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.663483881 s


10000x10000x10000	3.663484 s	545.928429 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.941684486 s


10000x10000x10000	2.941684 s	679.882567 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.260906909 s


10000x10000x10000	2.260907 s	884.600773 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.632165919 s


10000x10000x10000	1.632166 s	1225.365618 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.560053340 s


10000x10000x10000	1.560053 s	1282.007447 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.849466484 s


10000x10000x10000	0.849466 s	2354.418965 GFLOPS
File saved successfully
Number of cores = 33 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.635171717 s


10000x10000x10000	3.635172 s	550.180337 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.940697250 s


10000x10000x10000	2.940697 s	680.110814 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.272245314 s


10000x10000x10000	2.272245 s	880.186654 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.638266543 s


10000x10000x10000	1.638267 s	1220.802566 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.568549043 s


10000x10000x10000	1.568549 s	1275.063734 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.847106298 s


10000x10000x10000	0.847106 s	2360.978787 GFLOPS
File saved successfully
Number of cores = 33 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.439175665 s


10000x10000x10000	3.439176 s	581.534703 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.935512862 s


10000x10000x10000	2.935513 s	681.311953 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.234522183 s


10000x10000x10000	2.234522 s	895.045937 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.758421822 s


10000x10000x10000	1.758422 s	1137.383519 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.551620037 s


10000x10000x10000	1.551620 s	1288.975363 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.787270493 s


10000x10000x10000	0.787270 s	2540.422914 GFLOPS
File saved successfully
Number of cores = 34 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.393343356 s


10000x10000x10000	3.393343 s	589.389222 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.927307043 s


10000x10000x10000	2.927307 s	683.221804 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.236785486 s


10000x10000x10000	2.236785 s	894.140280 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.783980386 s


10000x10000x10000	1.783980 s	1121.088559 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.538825939 s


10000x10000x10000	1.538826 s	1299.692154 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.783279371 s


10000x10000x10000	0.783279 s	2553.367386 GFLOPS
File saved successfully
Number of cores = 34 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.501850326 s


10000x10000x10000	3.501850 s	571.126637 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.933371012 s


10000x10000x10000	2.933371 s	681.809424 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.224719376 s


10000x10000x10000	2.224719 s	898.989788 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.769285300 s


10000x10000x10000	1.769285 s	1130.399942 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.536360018 s


10000x10000x10000	1.536360 s	1301.778214 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.784408312 s


10000x10000x10000	0.784408 s	2549.692513 GFLOPS
File saved successfully
Number of cores = 34 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.409195421 s


10000x10000x10000	3.409195 s	586.648682 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.901286858 s


10000x10000x10000	2.901287 s	689.349278 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.239589932 s


10000x10000x10000	2.239590 s	893.020625 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.828532939 s


10000x10000x10000	1.828533 s	1093.773023 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.546632137 s


10000x10000x10000	1.546632 s	1293.132318 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.785337797 s


10000x10000x10000	0.785338 s	2546.674829 GFLOPS
File saved successfully
Number of cores = 34 iteration=4

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.365066582 s


10000x10000x10000	3.365067 s	594.341880 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.935997970 s


10000x10000x10000	2.935998 s	681.199381 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.214926165 s


10000x10000x10000	2.214926 s	902.964637 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.836471406 s


10000x10000x10000	1.836471 s	1089.044999 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.546116175 s


10000x10000x10000	1.546116 s	1293.563855 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.783741664 s


10000x10000x10000	0.783742 s	2551.861272 GFLOPS
File saved successfully
Number of cores = 34 iteration=5
iterations ended
Specify how many cores of the partition will be used
number of cores specified
start 5 iterations

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.671951622 s


10000x10000x10000	3.671952 s	544.669485 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.956330848 s


10000x10000x10000	2.956331 s	676.514268 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.405932129 s


10000x10000x10000	2.405932 s	831.278645 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.522213248 s


10000x10000x10000	1.522213 s	1313.876359 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.601226955 s


10000x10000x10000	1.601227 s	1249.042176 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.921229465 s


10000x10000x10000	0.921229 s	2171.011758 GFLOPS
File saved successfully
Number of cores = 35 iteration=1

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.886428505 s


10000x10000x10000	3.886429 s	514.611293 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.8870266 s


10000x10000x10000	3.008870 s	664.701308 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.407304551 s


10000x10000x10000	2.407305 s	830.804727 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.506470235 s


10000x10000x10000	1.506470 s	1327.606715 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.591329459 s


10000x10000x10000	1.591329 s	1256.810768 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.922726942 s


10000x10000x10000	0.922727 s	2167.488462 GFLOPS
File saved successfully
Number of cores = 35 iteration=2

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.700294217 s


10000x10000x10000	3.700294 s	540.497561 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.8509985 s


10000x10000x10000	3.008510 s	664.780908 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.408011099 s


10000x10000x10000	2.408011 s	830.560956 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.503747547 s


10000x10000x10000	1.503748 s	1330.010482 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.590155467 s


10000x10000x10000	1.590155 s	1257.738656 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 0.922241537 s


10000x10000x10000	0.922242 s	2168.629280 GFLOPS
File saved successfully
Number of cores = 35 iteration=3

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 3.698925477 s


10000x10000x10000	3.698925 s	540.697565 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.960466960 s


10000x10000x10000	2.960467 s	675.569100 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using double 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 2.403752932 s


10000x10000x10000	2.403753 s	832.032266 GFLOPS
File saved successfully

 This example computes real matrix C=alpha*A*B+beta*C using 
 BLAS function dgemm, where A, B, and  C are matrices and 
 alpha and beta are scalars

 Initializing data for matrix multiplication C=A*B for matrix 
 A(10000x10000) and matrix B(10000x10000)

 Using float 

 Computing matrix product using gemm function via CBLAS interface 

 Elapsed time 1.502632783 s


10000x10000x10000	1.502633 s	1330.997182 GFLOPS
File saved successfully
slurmstepd: error: *** JOB 23580 ON epyc005 CANCELLED AT 2023-08-26T14:53:28 DUE TO TIME LIMIT ***
